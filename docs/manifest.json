{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.0", "generated_at": "2022-12-15T16:18:55.783220Z", "invocation_id": "0cce88d0-4e76-4f76-9935-e3e6d52db527", "env": {}, "project_id": "0dfe5262052586a32750b9977767762a", "user_id": "8929baf0-9bc1-477e-9a57-eb8b0db4da62", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"seed.greenhouse_source_integration_tests.attachment": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "candidate_id": "bigint", "index": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "attachment"], "unique_id": "seed.greenhouse_source_integration_tests.attachment", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "attachment.csv", "original_file_path": "seeds/attachment.csv", "name": "attachment", "alias": "attachment", "checksum": {"name": "sha256", "checksum": "1a68f634fd84802f5465432ec0b3a5a327b0587a0d448157b7bd1c63ad3db8b2"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"candidate_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "index": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.003365, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"attachment\""}, "seed.greenhouse_source_integration_tests.job": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "closed_at": "timestamp", "created_at": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "job"], "unique_id": "seed.greenhouse_source_integration_tests.job", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "job.csv", "original_file_path": "seeds/job.csv", "name": "job", "alias": "job", "checksum": {"name": "sha256", "checksum": "c0e3fefd549a34ad1b562e6ba07b4785cb08c117fe57bf5847a0625cb43ddee0"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "closed_at": "timestamp", "created_at": "timestamp", "updated_at": "timestamp"}}, "created_at": 1671121118.009257, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job\""}, "seed.greenhouse_source_integration_tests.source": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "source_type_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "source"], "unique_id": "seed.greenhouse_source_integration_tests.source", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "source.csv", "original_file_path": "seeds/source.csv", "name": "source", "alias": "source", "checksum": {"name": "sha256", "checksum": "fc2e5112d8007b38d80101a32412e5be55c1bc49323b7bb2ab9ad7010ef62079"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "source_type_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.0106292, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"source\""}, "seed.greenhouse_source_integration_tests.eeoc": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "application_id": "bigint", "disability_status_id": "bigint", "gender_id": "bigint", "race_id": "bigint", "veteran_status_id": "bigint", "submitted_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "eeoc"], "unique_id": "seed.greenhouse_source_integration_tests.eeoc", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "eeoc.csv", "original_file_path": "seeds/eeoc.csv", "name": "eeoc", "alias": "eeoc", "checksum": {"name": "sha256", "checksum": "f65e837b69e0ad3a370fc854768598bd63b42a36ddcbd0033505a9f80a8167db"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"application_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "disability_status_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "gender_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "race_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "veteran_status_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "submitted_at": "timestamp"}}, "created_at": 1671121118.0119932, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"eeoc\""}, "seed.greenhouse_source_integration_tests.application_history": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "updated_at": "timestamp", "application_id": "bigint", "new_stage_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "application_history"], "unique_id": "seed.greenhouse_source_integration_tests.application_history", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "application_history.csv", "original_file_path": "seeds/application_history.csv", "name": "application_history", "alias": "application_history", "checksum": {"name": "sha256", "checksum": "04b87f320989dda4c9bddb2f824bf32dd885a8e994dca843f14dd88d710bb62d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"updated_at": "timestamp", "application_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "new_stage_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.013247, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"application_history\""}, "seed.greenhouse_source_integration_tests.job_post": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "created_at": "timestamp", "job_id": "bigint", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "job_post"], "unique_id": "seed.greenhouse_source_integration_tests.job_post", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "job_post.csv", "original_file_path": "seeds/job_post.csv", "name": "job_post", "alias": "job_post", "checksum": {"name": "sha256", "checksum": "b36a0828b2bb273434f77ffe71193832cd588323bf989e48e910fbc8c0088460"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp", "job_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "updated_at": "timestamp"}}, "created_at": 1671121118.014451, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job_post\""}, "seed.greenhouse_source_integration_tests.prospect_stage": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "prospect_pool_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "prospect_stage"], "unique_id": "seed.greenhouse_source_integration_tests.prospect_stage", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "prospect_stage.csv", "original_file_path": "seeds/prospect_stage.csv", "name": "prospect_stage", "alias": "prospect_stage", "checksum": {"name": "sha256", "checksum": "1d2ad33d02e0787629fbdeeced3e9a0ebe77fa645e8490326193a900fd4050c1"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "prospect_pool_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.016125, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"prospect_stage\""}, "seed.greenhouse_source_integration_tests.office": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "parent_id": "bigint", "primary_contact_user_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "office"], "unique_id": "seed.greenhouse_source_integration_tests.office", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "office.csv", "original_file_path": "seeds/office.csv", "name": "office", "alias": "office", "checksum": {"name": "sha256", "checksum": "91584e69c97ef7af83bd434c4ebd932294c84bfe71529022cb9a742b0c30c7db"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "parent_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "primary_contact_user_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.017364, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"office\""}, "seed.greenhouse_source_integration_tests.interview": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "job_stage_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "interview"], "unique_id": "seed.greenhouse_source_integration_tests.interview", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "interview.csv", "original_file_path": "seeds/interview.csv", "name": "interview", "alias": "interview", "checksum": {"name": "sha256", "checksum": "32921f3191a73751c2c8a8eb9479c5a3c3c9030847d0d4fe39f342d0d576bc2a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "job_stage_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.01859, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"interview\""}, "seed.greenhouse_source_integration_tests.candidate": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "coordinator_id": "bigint", "created_at": "timestamp", "last_activity": "timestamp", "new_candidate_id": "bigint", "recruiter_id": "bigint", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "candidate"], "unique_id": "seed.greenhouse_source_integration_tests.candidate", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "candidate.csv", "original_file_path": "seeds/candidate.csv", "name": "candidate", "alias": "candidate", "checksum": {"name": "sha256", "checksum": "626f7799b32fbab954996934ad4a81f84c755cabf1ffb447bf246e16f17ceed4"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "coordinator_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp", "last_activity": "timestamp", "new_candidate_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "recruiter_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "updated_at": "timestamp"}}, "created_at": 1671121118.0198421, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"candidate\""}, "seed.greenhouse_source_integration_tests.hiring_team": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "job_id": "bigint", "user_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "hiring_team"], "unique_id": "seed.greenhouse_source_integration_tests.hiring_team", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "hiring_team.csv", "original_file_path": "seeds/hiring_team.csv", "name": "hiring_team", "alias": "hiring_team", "checksum": {"name": "sha256", "checksum": "9db30d6517724f024f615ca2b1fa1f3029c94b659ee2a49c44ee903701c78e5d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"job_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "user_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.021206, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"hiring_team\""}, "seed.greenhouse_source_integration_tests.job_application": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "application_id": "bigint", "job_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "job_application"], "unique_id": "seed.greenhouse_source_integration_tests.job_application", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "job_application.csv", "original_file_path": "seeds/job_application.csv", "name": "job_application", "alias": "job_application", "checksum": {"name": "sha256", "checksum": "d36d968ae08fc52162c2c870666b094886f8d368f0a234d549ce307de131df3e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"application_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "job_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.0224261, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job_application\""}, "seed.greenhouse_source_integration_tests.social_media_address": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "index": "bigint", "candidate_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "social_media_address"], "unique_id": "seed.greenhouse_source_integration_tests.social_media_address", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "social_media_address.csv", "original_file_path": "seeds/social_media_address.csv", "name": "social_media_address", "alias": "social_media_address", "checksum": {"name": "sha256", "checksum": "24eb3c5bd9a3298b6402f3d78b7b06b6e8afb64968e346a484ed5631e3d604f5"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"index": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "candidate_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.023629, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"social_media_address\""}, "seed.greenhouse_source_integration_tests.scheduled_interviewer": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "interviewer_id": "bigint", "scheduled_interview_id": "bigint", "scorecard_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "scheduled_interviewer"], "unique_id": "seed.greenhouse_source_integration_tests.scheduled_interviewer", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "scheduled_interviewer.csv", "original_file_path": "seeds/scheduled_interviewer.csv", "name": "scheduled_interviewer", "alias": "scheduled_interviewer", "checksum": {"name": "sha256", "checksum": "53ce13821ef779ab30a487f1ade648d43e400b9bf060f3dce37eee15e9575be9"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"interviewer_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "scheduled_interview_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "scorecard_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.0248299, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"scheduled_interviewer\""}, "seed.greenhouse_source_integration_tests.user_email": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "user_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "user_email"], "unique_id": "seed.greenhouse_source_integration_tests.user_email", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "user_email.csv", "original_file_path": "seeds/user_email.csv", "name": "user_email", "alias": "user_email", "checksum": {"name": "sha256", "checksum": "382a66eee2b3d14b3f32048b3c4bb4c4f65986cd6b047c1615ba0470ff6a6aa8"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"user_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.026151, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"user_email\""}, "seed.greenhouse_source_integration_tests.activity": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created_at": "timestamp", "candidate_id": "bigint", "id": "bigint", "user_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "activity"], "unique_id": "seed.greenhouse_source_integration_tests.activity", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "activity.csv", "original_file_path": "seeds/activity.csv", "name": "activity", "alias": "activity", "checksum": {"name": "sha256", "checksum": "57883246d75aea6804da849158ec85da6a814aff894455156fa10765b0bf187d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"created_at": "timestamp", "candidate_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "user_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.027364, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"activity\""}, "seed.greenhouse_source_integration_tests.department": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "parent_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "department"], "unique_id": "seed.greenhouse_source_integration_tests.department", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "department.csv", "original_file_path": "seeds/department.csv", "name": "department", "alias": "department", "checksum": {"name": "sha256", "checksum": "5f0dc639eb6a7c9e54ca593faf54fd92c4f9dc6768c40c4e3a2a809102a8397f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "parent_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.028567, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"department\""}, "seed.greenhouse_source_integration_tests.job_department": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "department_id": "bigint", "job_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "job_department"], "unique_id": "seed.greenhouse_source_integration_tests.job_department", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "job_department.csv", "original_file_path": "seeds/job_department.csv", "name": "job_department", "alias": "job_department", "checksum": {"name": "sha256", "checksum": "6a7aa58c6fd28d27d943ff716e7508a93fe4e9eed571301e1c1a0ec98442c51c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"department_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "job_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.0299, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job_department\""}, "seed.greenhouse_source_integration_tests.tag": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "tag"], "unique_id": "seed.greenhouse_source_integration_tests.tag", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "tag.csv", "original_file_path": "seeds/tag.csv", "name": "tag", "alias": "tag", "checksum": {"name": "sha256", "checksum": "7f4362b90822a11a5f792f52b26af077d221f3b537c05ebafa521dcaff2c825d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.032335, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"tag\""}, "seed.greenhouse_source_integration_tests.scorecard_attribute": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "index": "bigint", "scorecard_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "scorecard_attribute"], "unique_id": "seed.greenhouse_source_integration_tests.scorecard_attribute", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "scorecard_attribute.csv", "original_file_path": "seeds/scorecard_attribute.csv", "name": "scorecard_attribute", "alias": "scorecard_attribute", "checksum": {"name": "sha256", "checksum": "f3f5ecc1a1fb50482da952bbf6291310fbc97f351168f9f2426fbf46179a52bf"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"index": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "scorecard_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.033535, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"scorecard_attribute\""}, "seed.greenhouse_source_integration_tests.phone_number": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "candidate_id": "bigint", "index": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "phone_number"], "unique_id": "seed.greenhouse_source_integration_tests.phone_number", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "phone_number.csv", "original_file_path": "seeds/phone_number.csv", "name": "phone_number", "alias": "phone_number", "checksum": {"name": "sha256", "checksum": "0cf657e3b251a116475044261210ba45e996407dab04ce67c665e9805ed203d5"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"candidate_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "index": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.034855, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"phone_number\""}, "seed.greenhouse_source_integration_tests.scheduled_interview": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "application_id": "bigint", "interview_id": "bigint", "organizer_id": "bigint", "created_at": "timestamp", "end": "timestamp", "start": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "scheduled_interview"], "unique_id": "seed.greenhouse_source_integration_tests.scheduled_interview", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "scheduled_interview.csv", "original_file_path": "seeds/scheduled_interview.csv", "name": "scheduled_interview", "alias": "scheduled_interview", "checksum": {"name": "sha256", "checksum": "2f8fdcf9773609cfddfa7c0d76b81f26b10800b5bfceea00a207469bb84f26fd"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "application_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "interview_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "organizer_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp", "end": "timestamp", "start": "timestamp", "updated_at": "timestamp"}, "quote_columns": "{{ true if target.type == 'redshift' else false }}", "enabled": "{{ true if target.type != 'snowflake' else false }}"}, "created_at": 1671121118.036076, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"scheduled_interview\""}, "seed.greenhouse_source_integration_tests.user": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "created_at": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "user"], "unique_id": "seed.greenhouse_source_integration_tests.user", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "user.csv", "original_file_path": "seeds/user.csv", "name": "user", "alias": "user", "checksum": {"name": "sha256", "checksum": "6820eb3963976a0bf3251afdd076bc762eed88b07a566b225bbf310dbb28643f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp", "updated_at": "timestamp"}}, "created_at": 1671121118.037291, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"user\""}, "seed.greenhouse_source_integration_tests.prospect_pool": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "prospect_pool"], "unique_id": "seed.greenhouse_source_integration_tests.prospect_pool", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "prospect_pool.csv", "original_file_path": "seeds/prospect_pool.csv", "name": "prospect_pool", "alias": "prospect_pool", "checksum": {"name": "sha256", "checksum": "af65159fefb2bcc572aac11a13e377774e235ee62dc707d352357b018443e7d2"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.0384982, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"prospect_pool\""}, "seed.greenhouse_source_integration_tests.job_stage": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "created_at": "timestamp", "job_id": "bigint", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "job_stage"], "unique_id": "seed.greenhouse_source_integration_tests.job_stage", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "job_stage.csv", "original_file_path": "seeds/job_stage.csv", "name": "job_stage", "alias": "job_stage", "checksum": {"name": "sha256", "checksum": "56c8c02af4c85892537877bbc3fbdd52a5305e0c0f758185921b3f1056b5bb31"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp", "job_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "updated_at": "timestamp"}}, "created_at": 1671121118.0398269, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job_stage\""}, "seed.greenhouse_source_integration_tests.application": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "applied_at": "timestamp", "candidate_id": "bigint", "credited_to_user_id": "bigint", "current_stage_id": "bigint", "last_activity_at": "timestamp", "prospect_owner_id": "bigint", "prospect_pool_id": "bigint", "prospect_stage_id": "bigint", "rejected_reason_id": "bigint", "source_id": "bigint", "rejected_at": "timestamp", "is_deleted": "boolean"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "application"], "unique_id": "seed.greenhouse_source_integration_tests.application", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "application.csv", "original_file_path": "seeds/application.csv", "name": "application", "alias": "application", "checksum": {"name": "sha256", "checksum": "12adbfe092d20bd623d21b00748dea40bbb2e358386ec16944a1db6b49e42ddc"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "applied_at": "timestamp", "candidate_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "credited_to_user_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "current_stage_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "last_activity_at": "timestamp", "prospect_owner_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "prospect_pool_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "prospect_stage_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "rejected_reason_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "source_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "rejected_at": "timestamp", "is_deleted": "boolean"}}, "created_at": 1671121118.041043, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"application\""}, "seed.greenhouse_source_integration_tests.job_office": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "office_id": "bigint", "job_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "job_office"], "unique_id": "seed.greenhouse_source_integration_tests.job_office", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "job_office.csv", "original_file_path": "seeds/job_office.csv", "name": "job_office", "alias": "job_office", "checksum": {"name": "sha256", "checksum": "9b8c6c47ff3e5942fd6acdcf995baacc0894685448f078db964d1bb185898f9e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"office_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "job_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.042253, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job_office\""}, "seed.greenhouse_source_integration_tests.email_address": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "candidate_id": "bigint", "index": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "email_address"], "unique_id": "seed.greenhouse_source_integration_tests.email_address", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "email_address.csv", "original_file_path": "seeds/email_address.csv", "name": "email_address", "alias": "email_address", "checksum": {"name": "sha256", "checksum": "09cb4befd695540b338473fee7d4e321fcc613c93d06a5982fbda0e4e78a0740"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"candidate_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "index": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.0435672, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"email_address\""}, "seed.greenhouse_source_integration_tests.scorecard": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "application_id": "bigint", "candidate_id": "bigint", "submitted_by_user_id": "bigint", "created_at": "timestamp", "interviewed_at": "timestamp", "submitted_at": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "scorecard"], "unique_id": "seed.greenhouse_source_integration_tests.scorecard", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "scorecard.csv", "original_file_path": "seeds/scorecard.csv", "name": "scorecard", "alias": "scorecard", "checksum": {"name": "sha256", "checksum": "8286f5f04c2a3c8eb52b3da45081717e47f58d9c18f370135a65ea183d06ddf2"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "application_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "candidate_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "submitted_by_user_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp", "interviewed_at": "timestamp", "submitted_at": "timestamp", "updated_at": "timestamp"}}, "created_at": 1671121118.044769, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"scorecard\""}, "seed.greenhouse_source_integration_tests.candidate_tag": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "candidate_id": "bigint", "tag_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "candidate_tag"], "unique_id": "seed.greenhouse_source_integration_tests.candidate_tag", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "candidate_tag.csv", "original_file_path": "seeds/candidate_tag.csv", "name": "candidate_tag", "alias": "candidate_tag", "checksum": {"name": "sha256", "checksum": "c7ab7322cc97cf7713fe67c6768af630b3e83d0ed091f55259a8c488dc4e86b4"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"candidate_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "tag_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671121118.045977, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"candidate_tag\""}, "seed.greenhouse_source_integration_tests.job_opening": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "job_id": "bigint", "application_id": "bigint", "close_reason_id": "bigint", "closed_at": "timestamp", "opened_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "job_opening"], "unique_id": "seed.greenhouse_source_integration_tests.job_opening", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "job_opening.csv", "original_file_path": "seeds/job_opening.csv", "name": "job_opening", "alias": "job_opening", "checksum": {"name": "sha256", "checksum": "7aa8075bbe08b2772930ff359afe54eed044e8243f43e47ed575652b3a9b9a66"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "job_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "application_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "close_reason_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "closed_at": "timestamp", "opened_at": "timestamp"}}, "created_at": 1671121118.047174, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job_opening\""}, "model.greenhouse_source.stg_greenhouse__user": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_user_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.greenhouse_source.stg_greenhouse__user_tmp", "model.greenhouse_source.stg_greenhouse__user_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__user"], "unique_id": "model.greenhouse_source.stg_greenhouse__user", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__user_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__user_tmp')),\n                staging_columns=get_user_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        disabled as is_disabled,\n        employee_id, -- external\n        first_name || ' ' || last_name as full_name,\n        id as user_id,\n        site_admin as is_site_admin,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as last_updated_at\n\n    from fields\n\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__user.sql", "original_file_path": "models/stg_greenhouse__user.sql", "name": "stg_greenhouse__user", "alias": "stg_greenhouse__user", "checksum": {"name": "sha256", "checksum": "a958ad604e9e17e72881a9f0b6c2434064ca23baf7eb27e1bce78ec641e8c480"}, "tags": [], "refs": [["stg_greenhouse__user_tmp"], ["stg_greenhouse__user_tmp"]], "sources": [], "metrics": [], "description": "Table of an organization's Greenhouse users.", "columns": {"created_at": {"name": "created_at", "description": "Timestamp of when the user was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_disabled": {"name": "is_disabled", "description": "Boolean that is true if the user account has been disabled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "employee_id": {"name": "employee_id", "description": "The user\u2019s external employee id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "User's full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Unique ID of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_site_admin": {"name": "is_site_admin", "description": "If true, this user is a site admin, which means the user has full permissions on all non-private jobs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_at": {"name": "last_updated_at", "description": "Timestamp of when the user was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__user.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.519767, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__user_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    disabled\n    \n as \n    \n    disabled\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    site_admin\n    \n as \n    \n    site_admin\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        cast(created_at as TIMESTAMP) as created_at,\n        disabled as is_disabled,\n        employee_id, -- external\n        first_name || ' ' || last_name as full_name,\n        id as user_id,\n        site_admin as is_site_admin,\n        cast(updated_at as TIMESTAMP) as last_updated_at\n\n    from fields\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__user\""}, "model.greenhouse_source.stg_greenhouse__job_office": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_job_office_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_office_tmp", "model.greenhouse_source.stg_greenhouse__job_office_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__job_office"], "unique_id": "model.greenhouse_source.stg_greenhouse__job_office", "raw_code": "{{ config(enabled=var('greenhouse_using_job_office', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_greenhouse__job_office_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__job_office_tmp')),\n                staging_columns=get_job_office_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        office_id,\n        job_id\n\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__job_office.sql", "original_file_path": "models/stg_greenhouse__job_office.sql", "name": "stg_greenhouse__job_office", "alias": "stg_greenhouse__job_office", "checksum": {"name": "sha256", "checksum": "d974132a6bd4d5f129813829b5ea67c67e30cfb2d88e58629cd5b208e9c9588c"}, "tags": [], "refs": [["stg_greenhouse__job_office_tmp"], ["stg_greenhouse__job_office_tmp"]], "sources": [], "metrics": [], "description": "Table relating jobs to the offices they exist in.", "columns": {"office_id": {"name": "office_id", "description": "Foreign key referencing the OFFICE associated with this job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Foreign key referencing the JOB.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__job_office.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.502382, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_office_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    job_id\n    \n as \n    \n    job_id\n    \n, \n    \n    \n    office_id\n    \n as \n    \n    office_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        office_id,\n        job_id\n\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_office\""}, "model.greenhouse_source.stg_greenhouse__scorecard_attribute": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_scorecard_attribute_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__scorecard_attribute_tmp", "model.greenhouse_source.stg_greenhouse__scorecard_attribute_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__scorecard_attribute"], "unique_id": "model.greenhouse_source.stg_greenhouse__scorecard_attribute", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__scorecard_attribute_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__scorecard_attribute_tmp')),\n                staging_columns=get_scorecard_attribute_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        index,\n        name as attribute_name,\n        note,\n        rating,\n        scorecard_id,\n        type as attribute_category\n\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__scorecard_attribute.sql", "original_file_path": "models/stg_greenhouse__scorecard_attribute.sql", "name": "stg_greenhouse__scorecard_attribute", "alias": "stg_greenhouse__scorecard_attribute", "checksum": {"name": "sha256", "checksum": "71745dcae4ce1e222ba8ebe0a601931437c7356dd86788db9e942b0f7c00f4c6"}, "tags": [], "refs": [["stg_greenhouse__scorecard_attribute_tmp"], ["stg_greenhouse__scorecard_attribute_tmp"]], "sources": [], "metrics": [], "description": "Table capturing ratings along individual standards within each scorecard.", "columns": {"index": {"name": "index", "description": "Index of this rating/standard amongst the attributes of this scorecard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attribute_name": {"name": "attribute_name", "description": "Name of the scorecard attribute.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "Additional from the interviewer regarding the attribute score.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rating": {"name": "rating", "description": "Rating given to the candidate along this individual scorecard attribute.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scorecard_id": {"name": "scorecard_id", "description": "Foreign key referencing the SCORECARD this attribute rating belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attribute_category": {"name": "attribute_category", "description": "Category of the attribute.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__scorecard_attribute.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.515584, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scorecard_attribute_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    rating\n    \n as \n    \n    rating\n    \n, \n    \n    \n    scorecard_id\n    \n as \n    \n    scorecard_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        index,\n        name as attribute_name,\n        note,\n        rating,\n        scorecard_id,\n        type as attribute_category\n\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scorecard_attribute\""}, "model.greenhouse_source.stg_greenhouse__scheduled_interview": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_scheduled_interview_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.greenhouse_source.stg_greenhouse__scheduled_interview_tmp", "model.greenhouse_source.stg_greenhouse__scheduled_interview_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__scheduled_interview"], "unique_id": "model.greenhouse_source.stg_greenhouse__scheduled_interview", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__scheduled_interview_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__scheduled_interview_tmp')),\n                staging_columns=get_scheduled_interview_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        application_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        cast(\n        {%- if target.type == 'bigquery' %}\n        `end` \n        {% elif target.type in ('redshift','postgres') %} \n        \"end\" \n        {% else %}\n        end \n        {% endif %}\n        as {{ dbt.type_timestamp() }}) as end_at,\n        id as scheduled_interview_id,\n        interview_id,\n        location,\n        organizer_id as organizer_user_id,\n\n        cast(\n        {%- if target.type == 'snowflake' %}\n        \"START\" \n        {% else %}\n        start \n        {% endif %}\n        as {{ dbt.type_timestamp() }}) as start_at,\n        \n        status,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as last_updated_at\n        \n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__scheduled_interview.sql", "original_file_path": "models/stg_greenhouse__scheduled_interview.sql", "name": "stg_greenhouse__scheduled_interview", "alias": "stg_greenhouse__scheduled_interview", "checksum": {"name": "sha256", "checksum": "2b0774177983590590948fe46554104faa298b4ad9b39d6656d043532820db3e"}, "tags": [], "refs": [["stg_greenhouse__scheduled_interview_tmp"], ["stg_greenhouse__scheduled_interview_tmp"]], "sources": [], "metrics": [], "description": "Table storing interviews that have been scheduled for the specified application.", "columns": {"application_id": {"name": "application_id", "description": "Foreign key referencing the APPLICATION that is being interviewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the interview was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_at": {"name": "end_at", "description": "Timestamp of when the interview is scheduled to end. Will be a date if the interview is all-day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scheduled_interview_id": {"name": "scheduled_interview_id", "description": "Unique ID of the scheduled interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_id": {"name": "interview_id", "description": "Foreign key referencing the id of the generic INTERVIEW step that this scheduled interview maps to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "The location of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizer_user_id": {"name": "organizer_user_id", "description": "Foreign key referencing the USER who organized the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_at": {"name": "start_at", "description": "Timestamp of when the interview is scheduled to start. Will be a date if the interview is all-day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "One of - scheduled, awaiting_feedback, complete.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_at": {"name": "last_updated_at", "description": "Timestamp of when the interview was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__scheduled_interview.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.511538, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scheduled_interview_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    application_id\n    \n as \n    \n    application_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    interview_id\n    \n as \n    \n    interview_id\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    organizer_id\n    \n as \n    \n    organizer_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n        \n            \n            \"end\"\n            \n        \n    \n as \n    \n        \n            \n            \"end\"\n            \n        \n    \n, \n    \n    \n    start\n    \n as \n    \n    start\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        application_id,\n        cast(created_at as TIMESTAMP) as created_at,\n        cast( \n        \"end\" \n        \n        as TIMESTAMP) as end_at,\n        id as scheduled_interview_id,\n        interview_id,\n        location,\n        organizer_id as organizer_user_id,\n\n        cast(\n        start \n        \n        as TIMESTAMP) as start_at,\n        \n        status,\n        cast(updated_at as TIMESTAMP) as last_updated_at\n        \n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scheduled_interview\""}, "model.greenhouse_source.stg_greenhouse__job_post": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_job_post_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_post_tmp", "model.greenhouse_source.stg_greenhouse__job_post_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__job_post"], "unique_id": "model.greenhouse_source.stg_greenhouse__job_post", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__job_post_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__job_post_tmp')),\n                staging_columns=get_job_post_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        content,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        external as is_external,\n        id as job_post_id,\n        internal as is_internal,\n        internal_content,\n        job_id,\n        live as is_live,\n        location_name,\n        title,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as last_updated_at\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__job_post.sql", "original_file_path": "models/stg_greenhouse__job_post.sql", "name": "stg_greenhouse__job_post", "alias": "stg_greenhouse__job_post", "checksum": {"name": "sha256", "checksum": "6ee3683d68b858f946d40eeacf0fa743fa84a32bf2a7864099981bab7db06178"}, "tags": [], "refs": [["stg_greenhouse__job_post_tmp"], ["stg_greenhouse__job_post_tmp"]], "sources": [], "metrics": [], "description": "Table capturing the online job posts for an organization\u2019s jobs (as seen on the Job Board).", "columns": {"content": {"name": "content", "description": "The text of the job post as posted to the external job board.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the job post was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_external": {"name": "is_external", "description": "If true, this job post has been posted (or is to be posted) on an external job board.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_post_id": {"name": "job_post_id", "description": "Unique ID of the job post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_internal": {"name": "is_internal", "description": "If true, this job post has been posted (or is to be posted) on an internal job board.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "internal_content": {"name": "internal_content", "description": "The text of the job post if posted to the internal job board, if different than the external job board.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Foreign key referencing the JOB this post is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_live": {"name": "is_live", "description": "If true, this job post status is set to live.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_name": {"name": "location_name", "description": "Name of the location for this job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Title of the job post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_at": {"name": "last_updated_at", "description": "Timestamp of when the job post was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__job_post.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.505823, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_post_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    content\n    \n as \n    \n    content\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    external\n    \n as \n    \n    external\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    internal\n    \n as \n    \n    internal\n    \n, \n    \n    \n    internal_content\n    \n as \n    \n    internal_content\n    \n, \n    \n    \n    job_id\n    \n as \n    \n    job_id\n    \n, \n    \n    \n    live\n    \n as \n    \n    live\n    \n, \n    \n    \n    location_name\n    \n as \n    \n    location_name\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        content,\n        cast(created_at as TIMESTAMP) as created_at,\n        external as is_external,\n        id as job_post_id,\n        internal as is_internal,\n        internal_content,\n        job_id,\n        live as is_live,\n        location_name,\n        title,\n        cast(updated_at as TIMESTAMP) as last_updated_at\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_post\""}, "model.greenhouse_source.stg_greenhouse__job_stage": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_job_stage_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_stage_tmp", "model.greenhouse_source.stg_greenhouse__job_stage_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__job_stage"], "unique_id": "model.greenhouse_source.stg_greenhouse__job_stage", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__job_stage_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__job_stage_tmp')),\n                staging_columns=get_job_stage_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        id as job_stage_id,\n        job_id,\n        name as stage_name,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as last_updated_at\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__job_stage.sql", "original_file_path": "models/stg_greenhouse__job_stage.sql", "name": "stg_greenhouse__job_stage", "alias": "stg_greenhouse__job_stage", "checksum": {"name": "sha256", "checksum": "a415f18e2dceaefa8ec865c48239e6b858c593f1cdc6c486726482fc0e79d8c3"}, "tags": [], "refs": [["stg_greenhouse__job_stage_tmp"], ["stg_greenhouse__job_stage_tmp"]], "sources": [], "metrics": [], "description": "Table capturing each stage of a job's hiring pipeline.", "columns": {"created_at": {"name": "created_at", "description": "Timestamp of when the job stage was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_stage_id": {"name": "job_stage_id", "description": "Unique ID of the job stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Foreign key referencing the JOB for which the stage exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_name": {"name": "stage_name", "description": "Name of the job stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_at": {"name": "last_updated_at", "description": "Timestamp of when the job stage was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__job_stage.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.507293, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_stage_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    job_id\n    \n as \n    \n    job_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        cast(created_at as TIMESTAMP) as created_at,\n        id as job_stage_id,\n        job_id,\n        name as stage_name,\n        cast(updated_at as TIMESTAMP) as last_updated_at\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_stage\""}, "model.greenhouse_source.stg_greenhouse__social_media_address": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_social_media_address_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__social_media_address_tmp", "model.greenhouse_source.stg_greenhouse__social_media_address_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__social_media_address"], "unique_id": "model.greenhouse_source.stg_greenhouse__social_media_address", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__social_media_address_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__social_media_address_tmp')),\n                staging_columns=get_social_media_address_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        candidate_id,\n        index,\n        value as url\n        \n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__social_media_address.sql", "original_file_path": "models/stg_greenhouse__social_media_address.sql", "name": "stg_greenhouse__social_media_address", "alias": "stg_greenhouse__social_media_address", "checksum": {"name": "sha256", "checksum": "9f1322d9901c51dbad82b82145ec471478266d353af97fa068700ddc22479cc5"}, "tags": [], "refs": [["stg_greenhouse__social_media_address_tmp"], ["stg_greenhouse__social_media_address_tmp"]], "sources": [], "metrics": [], "description": "Table capturing social media links (ie linkedin, github) provided by candidates.", "columns": {"candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE associated with these links.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index of the social media link amongst the candidate's stored links.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The candidate's social media link.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__social_media_address.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.516435, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__social_media_address_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    candidate_id\n    \n as \n    \n    candidate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        candidate_id,\n        index,\n        value as url\n        \n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__social_media_address\""}, "model.greenhouse_source.stg_greenhouse__prospect_stage": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_prospect_stage_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__prospect_stage_tmp", "model.greenhouse_source.stg_greenhouse__prospect_stage_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__prospect_stage"], "unique_id": "model.greenhouse_source.stg_greenhouse__prospect_stage", "raw_code": "{{ config(enabled=var('greenhouse_using_prospects', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_greenhouse__prospect_stage_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__prospect_stage_tmp')),\n                staging_columns=get_prospect_stage_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as prospect_stage_id,\n        name as prospect_stage_name,\n        prospect_pool_id\n        \n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__prospect_stage.sql", "original_file_path": "models/stg_greenhouse__prospect_stage.sql", "name": "stg_greenhouse__prospect_stage", "alias": "stg_greenhouse__prospect_stage", "checksum": {"name": "sha256", "checksum": "4ac333ea00d060c1fbf39323fe6adb0cfe2777376a6eea006a54e8659f4d6ba2"}, "tags": [], "refs": [["stg_greenhouse__prospect_stage_tmp"], ["stg_greenhouse__prospect_stage_tmp"]], "sources": [], "metrics": [], "description": "Table capturing stages prospects in different pools advance through.", "columns": {"prospect_stage_id": {"name": "prospect_stage_id", "description": "Unique id of the prospect stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_stage_name": {"name": "prospect_stage_name", "description": "Name of the prospect stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_pool_id": {"name": "prospect_pool_id", "description": "Foreign key referencing the PROSPECT_POOL the stage belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__prospect_stage.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.5219111, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__prospect_stage_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    prospect_pool_id\n    \n as \n    \n    prospect_pool_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as prospect_stage_id,\n        name as prospect_stage_name,\n        prospect_pool_id\n        \n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__prospect_stage\""}, "model.greenhouse_source.stg_greenhouse__scorecard": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_scorecard_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.greenhouse_source.stg_greenhouse__scorecard_tmp", "model.greenhouse_source.stg_greenhouse__scorecard_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__scorecard"], "unique_id": "model.greenhouse_source.stg_greenhouse__scorecard", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__scorecard_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__scorecard_tmp')),\n                staging_columns=get_scorecard_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        application_id,\n        candidate_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        id as scorecard_id,\n        interview as interview_name,\n        cast(interviewed_at as {{ dbt.type_timestamp() }}) as interviewed_at,\n        overall_recommendation,\n        cast(submitted_at as {{ dbt.type_timestamp() }}) as submitted_at,\n        submitted_by_user_id,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as last_updated_at\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__scorecard.sql", "original_file_path": "models/stg_greenhouse__scorecard.sql", "name": "stg_greenhouse__scorecard", "alias": "stg_greenhouse__scorecard", "checksum": {"name": "sha256", "checksum": "28a63ef9197228ecfb6213c310a634392c6188fbd572cf11b0862336e34d517b"}, "tags": [], "refs": [["stg_greenhouse__scorecard_tmp"], ["stg_greenhouse__scorecard_tmp"]], "sources": [], "metrics": [], "description": "All submitted scorecards for candidate interviews.", "columns": {"application_id": {"name": "application_id", "description": "Foreign key referencing the APPLICATION for which the scorecard was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE who was interviewed and scored.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the scorecard was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scorecard_id": {"name": "scorecard_id", "description": "Unique ID of the scorecard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_name": {"name": "interview_name", "description": "Title of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interviewed_at": {"name": "interviewed_at", "description": "Timestamp of when the interview begun.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overall_recommendation": {"name": "overall_recommendation", "description": "One of - definitely_not, no, yes, strong_yes, no_decision.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submitted_at": {"name": "submitted_at", "description": "Timestamp of when the scorecard was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submitted_by_user_id": {"name": "submitted_by_user_id", "description": "Foreign key referencing the USER who submitted the scorecard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_at": {"name": "last_updated_at", "description": "Timestamp of when the scorecard was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__scorecard.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.514455, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scorecard_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    application_id\n    \n as \n    \n    application_id\n    \n, \n    \n    \n    candidate_id\n    \n as \n    \n    candidate_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    interview\n    \n as \n    \n    interview\n    \n, \n    \n    \n    interviewed_at\n    \n as \n    \n    interviewed_at\n    \n, \n    \n    \n    overall_recommendation\n    \n as \n    \n    overall_recommendation\n    \n, \n    \n    \n    submitted_at\n    \n as \n    \n    submitted_at\n    \n, \n    \n    \n    submitted_by_user_id\n    \n as \n    \n    submitted_by_user_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        application_id,\n        candidate_id,\n        cast(created_at as TIMESTAMP) as created_at,\n        id as scorecard_id,\n        interview as interview_name,\n        cast(interviewed_at as TIMESTAMP) as interviewed_at,\n        overall_recommendation,\n        cast(submitted_at as TIMESTAMP) as submitted_at,\n        submitted_by_user_id,\n        cast(updated_at as TIMESTAMP) as last_updated_at\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scorecard\""}, "model.greenhouse_source.stg_greenhouse__tag": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_tag_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__tag_tmp", "model.greenhouse_source.stg_greenhouse__tag_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__tag"], "unique_id": "model.greenhouse_source.stg_greenhouse__tag", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__tag_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__tag_tmp')),\n                staging_columns=get_tag_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as tag_id,\n        name as tag_name\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__tag.sql", "original_file_path": "models/stg_greenhouse__tag.sql", "name": "stg_greenhouse__tag", "alias": "stg_greenhouse__tag", "checksum": {"name": "sha256", "checksum": "b6bb1aafbc05e175e8ed891791ea443d6925f6e2bb60178a9a21336d266691dc"}, "tags": [], "refs": [["stg_greenhouse__tag_tmp"], ["stg_greenhouse__tag_tmp"]], "sources": [], "metrics": [], "description": "Table storing candidate tags.", "columns": {"tag_id": {"name": "tag_id", "description": "Unique ID of the tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tag_name": {"name": "tag_name", "description": "Title of the tag as it appears in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__tag.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.518137, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__tag_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as tag_id,\n        name as tag_name\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__tag\""}, "model.greenhouse_source.stg_greenhouse__job_application": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_job_application_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_application_tmp", "model.greenhouse_source.stg_greenhouse__job_application_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__job_application"], "unique_id": "model.greenhouse_source.stg_greenhouse__job_application", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__job_application_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__job_application_tmp')),\n                staging_columns=get_job_application_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        application_id,\n        job_id\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__job_application.sql", "original_file_path": "models/stg_greenhouse__job_application.sql", "name": "stg_greenhouse__job_application", "alias": "stg_greenhouse__job_application", "checksum": {"name": "sha256", "checksum": "eee03277876be2c8f575095da6fefca963ebfc792464415271cb9d557260e40e"}, "tags": [], "refs": [["stg_greenhouse__job_application_tmp"], ["stg_greenhouse__job_application_tmp"]], "sources": [], "metrics": [], "description": "Table relating applications to the jobs they applied to.", "columns": {"application_id": {"name": "application_id", "description": "Foreign key referencing the APPLICATION that was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Foreign key referencing the JOB that was applied to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__job_application.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.500902, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_application_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    application_id\n    \n as \n    \n    application_id\n    \n, \n    \n    \n    job_id\n    \n as \n    \n    job_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        application_id,\n        job_id\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_application\""}, "model.greenhouse_source.stg_greenhouse__phone_number": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_phone_number_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__phone_number_tmp", "model.greenhouse_source.stg_greenhouse__phone_number_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__phone_number"], "unique_id": "model.greenhouse_source.stg_greenhouse__phone_number", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__phone_number_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__phone_number_tmp')),\n                staging_columns=get_phone_number_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        candidate_id,\n        index,\n        type as phone_type,\n        value as phone_number\n\n    from fields\n\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__phone_number.sql", "original_file_path": "models/stg_greenhouse__phone_number.sql", "name": "stg_greenhouse__phone_number", "alias": "stg_greenhouse__phone_number", "checksum": {"name": "sha256", "checksum": "1570eadc9495288a72bca9cb612b5bd2b79ea46e1b7616129a7c212ed0d8dab1"}, "tags": [], "refs": [["stg_greenhouse__phone_number_tmp"], ["stg_greenhouse__phone_number_tmp"]], "sources": [], "metrics": [], "description": "Table capturing phone numbers associated with candidates.", "columns": {"candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE with this phone.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index of the phone number amongst phone numbers associated with this candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_type": {"name": "phone_type", "description": "Type of phone.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Candidate's phone number.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__phone_number.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.50971, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__phone_number_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    candidate_id\n    \n as \n    \n    candidate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        candidate_id,\n        index,\n        type as phone_type,\n        value as phone_number\n\n    from fields\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__phone_number\""}, "model.greenhouse_source.stg_greenhouse__activity": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_activity_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.greenhouse_source.stg_greenhouse__activity_tmp", "model.greenhouse_source.stg_greenhouse__activity_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__activity"], "unique_id": "model.greenhouse_source.stg_greenhouse__activity", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__activity_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__activity_tmp')),\n                staging_columns=get_activity_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        body,\n        candidate_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as occurred_at,\n        id as activity_id,\n        subject,\n        user_id\n\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__activity.sql", "original_file_path": "models/stg_greenhouse__activity.sql", "name": "stg_greenhouse__activity", "alias": "stg_greenhouse__activity", "checksum": {"name": "sha256", "checksum": "5b096257da6bf3860b085fe7da887259c5f061c427178353795b06bceb38ec11"}, "tags": [], "refs": [["stg_greenhouse__activity_tmp"], ["stg_greenhouse__activity_tmp"]], "sources": [], "metrics": [], "description": "Table capturing lists of activities on a candidate\u2019s profile, including interviews, notes, and emails.", "columns": {"body": {"name": "body", "description": "Content of the activity taken.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE whose profile was acted upon.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "Timestamp of when the activity occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activity_id": {"name": "activity_id", "description": "The internal Greenhouse ID of the activity feed note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "Subject of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the USER who performed the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__activity.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.483634, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__activity_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    candidate_id\n    \n as \n    \n    candidate_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        body,\n        candidate_id,\n        cast(created_at as TIMESTAMP) as occurred_at,\n        id as activity_id,\n        subject,\n        user_id\n\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__activity\""}, "model.greenhouse_source.stg_greenhouse__job_opening": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_job_opening_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_opening_tmp", "model.greenhouse_source.stg_greenhouse__job_opening_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__job_opening"], "unique_id": "model.greenhouse_source.stg_greenhouse__job_opening", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__job_opening_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__job_opening_tmp')),\n                staging_columns=get_job_opening_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        application_id,\n        close_reason_id,\n        cast(closed_at as {{ dbt.type_timestamp() }}) as closed_at,\n        id as job_openining_id,\n        job_id,\n        cast(opened_at as {{ dbt.type_timestamp() }}) as opened_at,\n        opening_id as opening_text_id,\n        status as current_status\n\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__job_opening.sql", "original_file_path": "models/stg_greenhouse__job_opening.sql", "name": "stg_greenhouse__job_opening", "alias": "stg_greenhouse__job_opening", "checksum": {"name": "sha256", "checksum": "3730309e76e7b1363fab65cf2f7eba51a4e9258356ccf7bfb4e4c07afc468c05"}, "tags": [], "refs": [["stg_greenhouse__job_opening_tmp"], ["stg_greenhouse__job_opening_tmp"]], "sources": [], "metrics": [], "description": "Table capturing openings made for jobs.", "columns": {"application_id": {"name": "application_id", "description": "Foreign key referencing the APPLICATION that was used to fill this opening.  This should only be set on a closed opening, null otherwise.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "close_reason_id": {"name": "close_reason_id", "description": "Foreign key referencing the CLOSE_REASON for this opening.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "Timestamp of when this opening was closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_openining_id": {"name": "job_openining_id", "description": "Unique ID of the job opening.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Foreign key referencing the id of the JOB that this opening exists for.  A job can have multiple openings.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opened_at": {"name": "opened_at", "description": "Timestamp of when the job was opened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opening_text_id": {"name": "opening_text_id", "description": "Opening ID visible from the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_status": {"name": "current_status", "description": "Either \u201copen\u201d or \u201cclosed\u201d.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__job_opening.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.503828, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_opening_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    application_id\n    \n as \n    \n    application_id\n    \n, \n    \n    \n    close_reason_id\n    \n as \n    \n    close_reason_id\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    job_id\n    \n as \n    \n    job_id\n    \n, \n    \n    \n    opened_at\n    \n as \n    \n    opened_at\n    \n, \n    \n    \n    opening_id\n    \n as \n    \n    opening_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        application_id,\n        close_reason_id,\n        cast(closed_at as TIMESTAMP) as closed_at,\n        id as job_openining_id,\n        job_id,\n        cast(opened_at as TIMESTAMP) as opened_at,\n        opening_id as opening_text_id,\n        status as current_status\n\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_opening\""}, "model.greenhouse_source.stg_greenhouse__application": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_application_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.greenhouse_source.stg_greenhouse__application_tmp", "model.greenhouse_source.stg_greenhouse__application_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__application"], "unique_id": "model.greenhouse_source.stg_greenhouse__application", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__application_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__application_tmp')),\n                staging_columns=get_application_columns()\n            )\n        }}\n    \n        {% if var('greenhouse_application_custom_columns', []) != [] %}\n        ,\n        {{ var('greenhouse_application_custom_columns', [] )  | join(', ') }}\n        {% endif %}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        cast(applied_at as {{ dbt.type_timestamp() }}) as applied_at,\n        candidate_id,\n        credited_to_user_id,\n        current_stage_id,\n        id as application_id,\n\n        cast(last_activity_at as {{ dbt.type_timestamp() }}) as last_activity_at,\n        location_address,\n        prospect as is_prospect,\n        prospect_owner_id as prospect_owner_user_id,\n        prospect_pool_id,\n        prospect_stage_id,\n        cast(rejected_at as {{ dbt.type_timestamp() }}) as rejected_at,\n        rejected_reason_id,\n        source_id,\n        status\n\n        {% if var('greenhouse_application_custom_columns', []) != [] %}\n        ,\n        {{ var('greenhouse_application_custom_columns', [] )  | join(', ') }}\n        {% endif %}\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__application.sql", "original_file_path": "models/stg_greenhouse__application.sql", "name": "stg_greenhouse__application", "alias": "stg_greenhouse__application", "checksum": {"name": "sha256", "checksum": "ea6f5565ef8c61be28fd386b2203a295357a14d9c1975e264fe04a2d346b711e"}, "tags": [], "refs": [["stg_greenhouse__application_tmp"], ["stg_greenhouse__application_tmp"]], "sources": [], "metrics": [], "description": "Table capturing all applications (candidates + prospects).", "columns": {"applied_at": {"name": "applied_at", "description": "Timestamp of when the application was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE who submitted the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credited_to_user_id": {"name": "credited_to_user_id", "description": "Foreign key referencing the USER who will receive credit for this application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_stage_id": {"name": "current_stage_id", "description": "Foreign key referencing the JOB_STAGE that the application is currently at in the pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_id": {"name": "application_id", "description": "Unique ID of the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_activity_at": {"name": "last_activity_at", "description": "Timestamp of when the last activity was taken on this application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_address": {"name": "location_address", "description": "The content of the address question on a job post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_prospect": {"name": "is_prospect", "description": "Boolean that is true if this is a prospect application, which means that the associated person  is a prospect and has not yet applied for this job.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_owner_user_id": {"name": "prospect_owner_user_id", "description": "Foreign key referencing the USER ID of the prospect owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_pool_id": {"name": "prospect_pool_id", "description": "Foreign key referencing the PROSPECT_POOL that the application came from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_stage_id": {"name": "prospect_stage_id", "description": "Foreign key referencing the ID of the application's PROSPECT_POOL_STAGE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rejected_at": {"name": "rejected_at", "description": "Timestamp of when the application was rejected.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rejected_reason_id": {"name": "rejected_reason_id", "description": "Foreign key referencing the REJECTION_REASON for the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "Foreign key referencing the ID of the SOURCE of the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "One of - active, rejected, hired.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__application.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.486448, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__application_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    applied_at\n    \n as \n    \n    applied_at\n    \n, \n    \n    \n    candidate_id\n    \n as \n    \n    candidate_id\n    \n, \n    \n    \n    credited_to_user_id\n    \n as \n    \n    credited_to_user_id\n    \n, \n    \n    \n    current_stage_id\n    \n as \n    \n    current_stage_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_activity_at\n    \n as \n    \n    last_activity_at\n    \n, \n    \n    \n    location_address\n    \n as \n    \n    location_address\n    \n, \n    \n    \n    prospect\n    \n as \n    \n    prospect\n    \n, \n    \n    \n    prospect_owner_id\n    \n as \n    \n    prospect_owner_id\n    \n, \n    \n    \n    prospect_pool_id\n    \n as \n    \n    prospect_pool_id\n    \n, \n    \n    \n    prospect_stage_id\n    \n as \n    \n    prospect_stage_id\n    \n, \n    \n    \n    rejected_at\n    \n as \n    \n    rejected_at\n    \n, \n    \n    \n    rejected_reason_id\n    \n as \n    \n    rejected_reason_id\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n    \n        \n        ,\n        custom_what_is_your_preferred_pronoun_, custom_how_did_you_hear_about_fivetran_\n        \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        cast(applied_at as TIMESTAMP) as applied_at,\n        candidate_id,\n        credited_to_user_id,\n        current_stage_id,\n        id as application_id,\n\n        cast(last_activity_at as TIMESTAMP) as last_activity_at,\n        location_address,\n        prospect as is_prospect,\n        prospect_owner_id as prospect_owner_user_id,\n        prospect_pool_id,\n        prospect_stage_id,\n        cast(rejected_at as TIMESTAMP) as rejected_at,\n        rejected_reason_id,\n        source_id,\n        status\n\n        \n        ,\n        custom_what_is_your_preferred_pronoun_, custom_how_did_you_hear_about_fivetran_\n        \n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__application\""}, "model.greenhouse_source.stg_greenhouse__candidate": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_candidate_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.greenhouse_source.stg_greenhouse__candidate_tmp", "model.greenhouse_source.stg_greenhouse__candidate_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__candidate"], "unique_id": "model.greenhouse_source.stg_greenhouse__candidate", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__candidate_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__candidate_tmp')),\n                staging_columns=get_candidate_columns()\n            )\n        }}\n        \n        {% if var('greenhouse_candidate_custom_columns', []) != [] %}\n        ,\n        {{ var('greenhouse_candidate_custom_columns', [] )  | join(', ') }}\n        {% endif %}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        company as current_company,\n        coordinator_id as coordinator_user_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        first_name || ' ' || last_name as full_name,\n        id as candidate_id,\n        is_private,\n        cast(last_activity as {{ dbt.type_timestamp() }}) as last_activity_at,\n        new_candidate_id,\n        recruiter_id as recruiter_user_id,\n        title as current_title,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as last_updated_at\n\n        {% if var('greenhouse_candidate_custom_columns', []) != [] %}\n        ,\n        {{ var('greenhouse_candidate_custom_columns', [] )  | join(', ') }}\n        {% endif %}\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__candidate.sql", "original_file_path": "models/stg_greenhouse__candidate.sql", "name": "stg_greenhouse__candidate", "alias": "stg_greenhouse__candidate", "checksum": {"name": "sha256", "checksum": "9d4b3e1dec980ce979648fb8ef62386881b4305a63164d28dd8ca9ced5527d2c"}, "tags": [], "refs": [["stg_greenhouse__candidate_tmp"], ["stg_greenhouse__candidate_tmp"]], "sources": [], "metrics": [], "description": "Table capturing an organization's candidates.", "columns": {"current_company": {"name": "current_company", "description": "The company at which the candidate currently works.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coordinator_user_id": {"name": "coordinator_user_id", "description": "Foreign key referencing the USER who is responsible for coordinating this candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the candidate profile was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "First and last name of the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "candidate_id": {"name": "candidate_id", "description": "Unique ID of the candidate in Greenhouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_private": {"name": "is_private", "description": "Boolean that is true if the candidate is private.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_activity_at": {"name": "last_activity_at", "description": "Timestamp of when the last activity was performed on this candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_candidate_id": {"name": "new_candidate_id", "description": "Self-referencing ID of the candidate's new candidate ID (ie they were a prospect and converted). Only deleted candidates should have a non-null new_candidate_id.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recruiter_user_id": {"name": "recruiter_user_id", "description": "Foreign key referencing the USER who is the recruiter assigned to this candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_title": {"name": "current_title", "description": "The candidate's current title.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_at": {"name": "last_updated_at", "description": "Timestamp of when the candidate profile was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__candidate.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.4902642, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__candidate_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    company\n    \n as \n    \n    company\n    \n, \n    \n    \n    coordinator_id\n    \n as \n    \n    coordinator_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_private\n    \n as \n    \n    is_private\n    \n, \n    \n    \n    last_activity\n    \n as \n    \n    last_activity\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    new_candidate_id\n    \n as \n    \n    new_candidate_id\n    \n, \n    \n    \n    recruiter_id\n    \n as \n    \n    recruiter_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        company as current_company,\n        coordinator_id as coordinator_user_id,\n        cast(created_at as TIMESTAMP) as created_at,\n        first_name || ' ' || last_name as full_name,\n        id as candidate_id,\n        is_private,\n        cast(last_activity as TIMESTAMP) as last_activity_at,\n        new_candidate_id,\n        recruiter_id as recruiter_user_id,\n        title as current_title,\n        cast(updated_at as TIMESTAMP) as last_updated_at\n\n        \n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__candidate\""}, "model.greenhouse_source.stg_greenhouse__job_department": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_job_department_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_department_tmp", "model.greenhouse_source.stg_greenhouse__job_department_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__job_department"], "unique_id": "model.greenhouse_source.stg_greenhouse__job_department", "raw_code": "{{ config(enabled=var('greenhouse_using_job_department', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_greenhouse__job_department_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__job_department_tmp')),\n                staging_columns=get_job_department_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        department_id,\n        job_id\n        \n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__job_department.sql", "original_file_path": "models/stg_greenhouse__job_department.sql", "name": "stg_greenhouse__job_department", "alias": "stg_greenhouse__job_department", "checksum": {"name": "sha256", "checksum": "fd654b821cbf2a9dc4f77c734d5ea792ff681516d38861f47b64fe6838455e93"}, "tags": [], "refs": [["stg_greenhouse__job_department_tmp"], ["stg_greenhouse__job_department_tmp"]], "sources": [], "metrics": [], "description": "Table relating jobs to the departments they exist in.", "columns": {"department_id": {"name": "department_id", "description": "Foreign key referencing the DEPARTMENT associated with this job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Foreign key referencing the JOB.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__job_department.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.50163, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_department_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    job_id\n    \n as \n    \n    job_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        department_id,\n        job_id\n        \n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_department\""}, "model.greenhouse_source.stg_greenhouse__application_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_application_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.greenhouse_source.stg_greenhouse__application_history_tmp", "model.greenhouse_source.stg_greenhouse__application_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__application_history"], "unique_id": "model.greenhouse_source.stg_greenhouse__application_history", "raw_code": "{{ config(enabled=var('greenhouse_using_app_history', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_greenhouse__application_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__application_history_tmp')),\n                staging_columns=get_application_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        application_id,\n        new_stage_id,\n        new_status,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at\n        \n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__application_history.sql", "original_file_path": "models/stg_greenhouse__application_history.sql", "name": "stg_greenhouse__application_history", "alias": "stg_greenhouse__application_history", "checksum": {"name": "sha256", "checksum": "ad544d6a75fea6f1ec8f188bce51e3d1a857cca9d022af732912ee9f9f77b7fc"}, "tags": [], "refs": [["stg_greenhouse__application_history_tmp"], ["stg_greenhouse__application_history_tmp"]], "sources": [], "metrics": [], "description": "Table capturing the history of applications as they advance through job stages.", "columns": {"application_id": {"name": "application_id", "description": "Foreign key referencing the APPLICATION that was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_stage_id": {"name": "new_stage_id", "description": "Foreign key referencing the JOB_STAGE that the application was advanced to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_status": {"name": "new_status", "description": "Status of the application as of this updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the application was advanced.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__application_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.487328, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__application_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    application_id\n    \n as \n    \n    application_id\n    \n, \n    \n    \n    new_stage_id\n    \n as \n    \n    new_stage_id\n    \n, \n    \n    \n    new_status\n    \n as \n    \n    new_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        application_id,\n        new_stage_id,\n        new_status,\n        cast(updated_at as TIMESTAMP) as updated_at\n        \n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__application_history\""}, "model.greenhouse_source.stg_greenhouse__interview": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_interview_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__interview_tmp", "model.greenhouse_source.stg_greenhouse__interview_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__interview"], "unique_id": "model.greenhouse_source.stg_greenhouse__interview", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__interview_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__interview_tmp')),\n                staging_columns=get_interview_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as interview_id,\n        interview_kit_content,\n        job_stage_id,\n        name\n        \n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__interview.sql", "original_file_path": "models/stg_greenhouse__interview.sql", "name": "stg_greenhouse__interview", "alias": "stg_greenhouse__interview", "checksum": {"name": "sha256", "checksum": "78f59c38ecc5b4d4d48e3dd485573d486a4357489ac6c688c756dc95ecc7c8ea"}, "tags": [], "refs": [["stg_greenhouse__interview_tmp"], ["stg_greenhouse__interview_tmp"]], "sources": [], "metrics": [], "description": "Table capturing the **generic** interview steps associated with each stage of a job. This differs  from SCHEDULED_INTERVIEW, which represents these interviews administered to individual candidates.\n", "columns": {"interview_id": {"name": "interview_id", "description": "Unique ID of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_kit_content": {"name": "interview_kit_content", "description": "Details about the interview, including unique ID, interview prep content, and custom interview questions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_stage_id": {"name": "job_stage_id", "description": "Foreign key referencing the JOB_STAGE that this interview is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Title of this interview step.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__interview.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.495968, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__interview_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    interview_kit_content\n    \n as \n    \n    interview_kit_content\n    \n, \n    \n    \n    job_stage_id\n    \n as \n    \n    job_stage_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as interview_id,\n        interview_kit_content,\n        job_stage_id,\n        name\n        \n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__interview\""}, "model.greenhouse_source.stg_greenhouse__scheduled_interviewer": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_scheduled_interviewer_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__scheduled_interviewer_tmp", "model.greenhouse_source.stg_greenhouse__scheduled_interviewer_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__scheduled_interviewer"], "unique_id": "model.greenhouse_source.stg_greenhouse__scheduled_interviewer", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__scheduled_interviewer_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__scheduled_interviewer_tmp')),\n                staging_columns=get_scheduled_interviewer_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        interviewer_id as interviewer_user_id,\n        scheduled_interview_id,\n        scorecard_id\n\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__scheduled_interviewer.sql", "original_file_path": "models/stg_greenhouse__scheduled_interviewer.sql", "name": "stg_greenhouse__scheduled_interviewer", "alias": "stg_greenhouse__scheduled_interviewer", "checksum": {"name": "sha256", "checksum": "e300887b3f352501c813325645846208dd4f49416dd3a49f05f37c4466a1038d"}, "tags": [], "refs": [["stg_greenhouse__scheduled_interviewer_tmp"], ["stg_greenhouse__scheduled_interviewer_tmp"]], "sources": [], "metrics": [], "description": "Table storing relating users to interviews they partook in.", "columns": {"interviewer_user_id": {"name": "interviewer_user_id", "description": "Foreign key referencing the USER conducting the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scheduled_interview_id": {"name": "scheduled_interview_id", "description": "Foreign key referencing the specific candidate's SCHEDULED_INTERVIEW id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scorecard_id": {"name": "scorecard_id", "description": "Foreign key referencing the SCORECARD associated with this interviewer's feedback.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__scheduled_interviewer.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.5122619, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scheduled_interviewer_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    interviewer_id\n    \n as \n    \n    interviewer_id\n    \n, \n    \n    \n    scheduled_interview_id\n    \n as \n    \n    scheduled_interview_id\n    \n, \n    \n    \n    scorecard_id\n    \n as \n    \n    scorecard_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        interviewer_id as interviewer_user_id,\n        scheduled_interview_id,\n        scorecard_id\n\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scheduled_interviewer\""}, "model.greenhouse_source.stg_greenhouse__department": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_department_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__department_tmp", "model.greenhouse_source.stg_greenhouse__department_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__department"], "unique_id": "model.greenhouse_source.stg_greenhouse__department", "raw_code": "{{ config(enabled=var('greenhouse_using_job_department', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_greenhouse__department_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__department_tmp')),\n                staging_columns=get_department_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        external_id as external_department_id,\n        id as department_id,\n        name,\n        parent_id as parent_department_id\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__department.sql", "original_file_path": "models/stg_greenhouse__department.sql", "name": "stg_greenhouse__department", "alias": "stg_greenhouse__department", "checksum": {"name": "sha256", "checksum": "179523b5ab05d7526d74015fb80c5b56c9fbedc34020c8653c7f881805185299"}, "tags": [], "refs": [["stg_greenhouse__department_tmp"], ["stg_greenhouse__department_tmp"]], "sources": [], "metrics": [], "description": "Table storing an organization's job departments.", "columns": {"external_department_id": {"name": "external_department_id", "description": "An arbitrary ID provided by an external source; does not map to another entity in Greenhouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Unique ID of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The department\u2019s name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_department_id": {"name": "parent_department_id", "description": "Self-referencing parent department ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__department.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.491756, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__department_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        external_id as external_department_id,\n        id as department_id,\n        name,\n        parent_id as parent_department_id\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__department\""}, "model.greenhouse_source.stg_greenhouse__source": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_source_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__source_tmp", "model.greenhouse_source.stg_greenhouse__source_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__source"], "unique_id": "model.greenhouse_source.stg_greenhouse__source", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__source_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__source_tmp')),\n                staging_columns=get_source_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as source_id,\n        name as source_name,\n        source_type_id,\n        source_type_name\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__source.sql", "original_file_path": "models/stg_greenhouse__source.sql", "name": "stg_greenhouse__source", "alias": "stg_greenhouse__source", "checksum": {"name": "sha256", "checksum": "13b1db62d2ba36975ae6a41132bed2b4171e64628d5829c2328ff39d5824183b"}, "tags": [], "refs": [["stg_greenhouse__source_tmp"], ["stg_greenhouse__source_tmp"]], "sources": [], "metrics": [], "description": "Table capturing an organization's applicant sources.", "columns": {"source_id": {"name": "source_id", "description": "Unique ID of the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Name of the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_type_id": {"name": "source_type_id", "description": "ID of the category of source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_type_name": {"name": "source_type_name", "description": "Name of the source category. One of - attend_events, referrals, third_party_boards,  candidate_search, other, social_media, company_marketing, agencies, prospecting.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__source.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.517385, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__source_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    source_type_id\n    \n as \n    \n    source_type_id\n    \n, \n    \n    \n    source_type_name\n    \n as \n    \n    source_type_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as source_id,\n        name as source_name,\n        source_type_id,\n        source_type_name\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__source\""}, "model.greenhouse_source.stg_greenhouse__eeoc": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_eeoc_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.greenhouse_source.stg_greenhouse__eeoc_tmp", "model.greenhouse_source.stg_greenhouse__eeoc_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__eeoc"], "unique_id": "model.greenhouse_source.stg_greenhouse__eeoc", "raw_code": "{{ config(enabled=var('greenhouse_using_eeoc', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_greenhouse__eeoc_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__eeoc_tmp')),\n                staging_columns=get_eeoc_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        application_id,\n        disability_status_description,\n        disability_status_id,\n        gender_description,\n        gender_id,\n        race_description,\n        race_id,\n        cast(submitted_at as {{ dbt.type_timestamp() }}) as submitted_at,\n        veteran_status_description,\n        veteran_status_id\n        \n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__eeoc.sql", "original_file_path": "models/stg_greenhouse__eeoc.sql", "name": "stg_greenhouse__eeoc", "alias": "stg_greenhouse__eeoc", "checksum": {"name": "sha256", "checksum": "7df2902cdb2d1a955d9e0afade6e3e107dd4d0e672fa11a5644af224d12458cb"}, "tags": [], "refs": [["stg_greenhouse__eeoc_tmp"], ["stg_greenhouse__eeoc_tmp"]], "sources": [], "metrics": [], "description": "Table capturing EEOC data provided by candidates.", "columns": {"application_id": {"name": "application_id", "description": "Foreign key referencing the ID of the application with this EEOC data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disability_status_description": {"name": "disability_status_description", "description": "Description of the applicant's disability status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disability_status_id": {"name": "disability_status_id", "description": "Foreign key referencing the status' DEMOGRAPHIC_ANSWER_OPTION ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender_description": {"name": "gender_description", "description": "Description of the applicant's gender identity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender_id": {"name": "gender_id", "description": "Foreign key referencing the gender identity's DEMOGRAPHIC_ANSWER_OPTION ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race_description": {"name": "race_description", "description": "Description of applicant's provided race.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race_id": {"name": "race_id", "description": "Foreign key referencing the racial identity's DEMOGRAPHIC_ANSWER_OPTION ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submitted_at": {"name": "submitted_at", "description": "Timestamp of when the EEOC data was submitted by the applicant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "veteran_status_description": {"name": "veteran_status_description", "description": "Description of the applicant's veteran status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "veteran_status_id": {"name": "veteran_status_id", "description": "Foreign key referencing the veteran status' DEMOGRAPHIC_ANSWER_OPTION ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__eeoc.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.493449, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__eeoc_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    application_id\n    \n as \n    \n    application_id\n    \n, \n    \n    \n    disability_status_description\n    \n as \n    \n    disability_status_description\n    \n, \n    \n    \n    disability_status_id\n    \n as \n    \n    disability_status_id\n    \n, \n    \n    \n    gender_description\n    \n as \n    \n    gender_description\n    \n, \n    \n    \n    gender_id\n    \n as \n    \n    gender_id\n    \n, \n    \n    \n    race_description\n    \n as \n    \n    race_description\n    \n, \n    \n    \n    race_id\n    \n as \n    \n    race_id\n    \n, \n    \n    \n    submitted_at\n    \n as \n    \n    submitted_at\n    \n, \n    \n    \n    veteran_status_description\n    \n as \n    \n    veteran_status_description\n    \n, \n    \n    \n    veteran_status_id\n    \n as \n    \n    veteran_status_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        application_id,\n        disability_status_description,\n        disability_status_id,\n        gender_description,\n        gender_id,\n        race_description,\n        race_id,\n        cast(submitted_at as TIMESTAMP) as submitted_at,\n        veteran_status_description,\n        veteran_status_id\n        \n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__eeoc\""}, "model.greenhouse_source.stg_greenhouse__user_email": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_user_email_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__user_email_tmp", "model.greenhouse_source.stg_greenhouse__user_email_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__user_email"], "unique_id": "model.greenhouse_source.stg_greenhouse__user_email", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__user_email_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__user_email_tmp')),\n                staging_columns=get_user_email_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        email,\n        user_id\n        \n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__user_email.sql", "original_file_path": "models/stg_greenhouse__user_email.sql", "name": "stg_greenhouse__user_email", "alias": "stg_greenhouse__user_email", "checksum": {"name": "sha256", "checksum": "aad910fd8472114981a27be777a1c08010695ed371ea14db5e54683a4b703592"}, "tags": [], "refs": [["stg_greenhouse__user_email_tmp"], ["stg_greenhouse__user_email_tmp"]], "sources": [], "metrics": [], "description": "Table associating Greenhouse users with their emails. \\", "columns": {"email": {"name": "email", "description": "User's email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the USER who has this email.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__user_email.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.5203898, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__user_email_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        email,\n        user_id\n        \n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__user_email\""}, "model.greenhouse_source.stg_greenhouse__prospect_pool": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_prospect_pool_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__prospect_pool_tmp", "model.greenhouse_source.stg_greenhouse__prospect_pool_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__prospect_pool"], "unique_id": "model.greenhouse_source.stg_greenhouse__prospect_pool", "raw_code": "{{ config(enabled=var('greenhouse_using_prospects', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_greenhouse__prospect_pool_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__prospect_pool_tmp')),\n                staging_columns=get_prospect_pool_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        active as is_active,\n        id as prospect_pool_id,\n        name as prospect_pool_name\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__prospect_pool.sql", "original_file_path": "models/stg_greenhouse__prospect_pool.sql", "name": "stg_greenhouse__prospect_pool", "alias": "stg_greenhouse__prospect_pool", "checksum": {"name": "sha256", "checksum": "3de86826fb6c1055c4aaae8234a39827f1e23d6e4467a3d9e22cb34f7e7205eb"}, "tags": [], "refs": [["stg_greenhouse__prospect_pool_tmp"], ["stg_greenhouse__prospect_pool_tmp"]], "sources": [], "metrics": [], "description": "Table capturing prospect pool groups.", "columns": {"is_active": {"name": "is_active", "description": "Boolean that is false if the pool is hidden from view in Greenhouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_pool_id": {"name": "prospect_pool_id", "description": "Unique ID of the prospect pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_pool_name": {"name": "prospect_pool_name", "description": "Name given to the prospect pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__prospect_pool.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.5211709, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__prospect_pool_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        active as is_active,\n        id as prospect_pool_id,\n        name as prospect_pool_name\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__prospect_pool\""}, "model.greenhouse_source.stg_greenhouse__job": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_job_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_tmp", "model.greenhouse_source.stg_greenhouse__job_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__job"], "unique_id": "model.greenhouse_source.stg_greenhouse__job", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__job_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__job_tmp')),\n                staging_columns=get_job_columns()\n            )\n        }}\n\n        {% if var('greenhouse_job_custom_columns', []) != [] %}\n        ,\n        {{ var('greenhouse_job_custom_columns', [] )  | join(', ') }}\n        {% endif %}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        cast(closed_at as {{ dbt.type_timestamp() }}) as last_opening_closed_at,\n        confidential as is_confidential,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        id as job_id,\n        name as job_title,\n        notes,\n        requisition_id,\n        status,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as last_updated_at\n        \n        {% if var('greenhouse_job_custom_columns', []) != [] %}\n        ,\n        {{ var('greenhouse_job_custom_columns', [] )  | join(', ') }}\n        {% endif %}\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__job.sql", "original_file_path": "models/stg_greenhouse__job.sql", "name": "stg_greenhouse__job", "alias": "stg_greenhouse__job", "checksum": {"name": "sha256", "checksum": "11ab1492b687cab4b036d9224dec1547dc87bcae190e9ae8b0436e51b1ffafa4"}, "tags": [], "refs": [["stg_greenhouse__job_tmp"], ["stg_greenhouse__job_tmp"]], "sources": [], "metrics": [], "description": "Table capturing all jobs stored in Greenhouse.", "columns": {"last_opening_closed_at": {"name": "last_opening_closed_at", "description": "Timestamp of when the last opening for this job closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_confidential": {"name": "is_confidential", "description": "Boolean that is true if the job is confidential.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the job was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Unique ID of the job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "Title of the job role.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Notes on the hiring plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_id": {"name": "requisition_id", "description": "The id of the requisition corresponding to this job posting, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "One of open, closed, draft.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_at": {"name": "last_updated_at", "description": "Timestamp of when the job was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__job.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.49982, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    confidential\n    \n as \n    \n    confidential\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    requisition_id\n    \n as \n    \n    requisition_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n        ,\n        custom_employment_type, custom_stock_options\n        \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        cast(closed_at as TIMESTAMP) as last_opening_closed_at,\n        confidential as is_confidential,\n        cast(created_at as TIMESTAMP) as created_at,\n        id as job_id,\n        name as job_title,\n        notes,\n        requisition_id,\n        status,\n        cast(updated_at as TIMESTAMP) as last_updated_at\n        \n        \n        ,\n        custom_employment_type, custom_stock_options\n        \n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job\""}, "model.greenhouse_source.stg_greenhouse__attachment": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_attachment_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__attachment_tmp", "model.greenhouse_source.stg_greenhouse__attachment_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__attachment"], "unique_id": "model.greenhouse_source.stg_greenhouse__attachment", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__attachment_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__attachment_tmp')),\n                staging_columns=get_attachment_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        candidate_id,\n        filename,\n        index,\n        type,\n        url\n\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__attachment.sql", "original_file_path": "models/stg_greenhouse__attachment.sql", "name": "stg_greenhouse__attachment", "alias": "stg_greenhouse__attachment", "checksum": {"name": "sha256", "checksum": "2f043aa423dec05965f9c2c2a4f5833fe2de59215620a68259198c1cefdb6799"}, "tags": [], "refs": [["stg_greenhouse__attachment_tmp"], ["stg_greenhouse__attachment_tmp"]], "sources": [], "metrics": [], "description": "Table capturing files attached to the candidate profile.", "columns": {"candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE who uploaded the attachment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "filename": {"name": "filename", "description": "Name of the file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index of the file upload amongst this candidate's attachments.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "One of [\u201cresume\u201d, \u201ccover_letter\u201d, \u201cadmin_only\u201d]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "Url of where the attachment is stored.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__attachment.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.4883342, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__attachment_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    candidate_id\n    \n as \n    \n    candidate_id\n    \n, \n    \n    \n    filename\n    \n as \n    \n    filename\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        candidate_id,\n        filename,\n        index,\n        type,\n        url\n\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__attachment\""}, "model.greenhouse_source.stg_greenhouse__email_address": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_email_address_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__email_address_tmp", "model.greenhouse_source.stg_greenhouse__email_address_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__email_address"], "unique_id": "model.greenhouse_source.stg_greenhouse__email_address", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__email_address_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__email_address_tmp')),\n                staging_columns=get_email_address_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        candidate_id,\n        index,\n        type,\n        value as email\n        \n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__email_address.sql", "original_file_path": "models/stg_greenhouse__email_address.sql", "name": "stg_greenhouse__email_address", "alias": "stg_greenhouse__email_address", "checksum": {"name": "sha256", "checksum": "15ca575a0bd9124da64d25b6f6557d53ee32dd3fbeb704c70cb9323adfef47f1"}, "tags": [], "refs": [["stg_greenhouse__email_address_tmp"], ["stg_greenhouse__email_address_tmp"]], "sources": [], "metrics": [], "description": "Table storing email addresses associated with candidates.", "columns": {"candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE whose email this is.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index of this individual email among all emails associated with this candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of email address - work, other, personal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The candidate's email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__email_address.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.494406, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__email_address_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    candidate_id\n    \n as \n    \n    candidate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        candidate_id,\n        index,\n        type,\n        value as email\n        \n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__email_address\""}, "model.greenhouse_source.stg_greenhouse__hiring_team": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_hiring_team_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__hiring_team_tmp", "model.greenhouse_source.stg_greenhouse__hiring_team_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__hiring_team"], "unique_id": "model.greenhouse_source.stg_greenhouse__hiring_team", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__hiring_team_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__hiring_team_tmp')),\n                staging_columns=get_hiring_team_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        job_id,\n        role,\n        user_id\n        \n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__hiring_team.sql", "original_file_path": "models/stg_greenhouse__hiring_team.sql", "name": "stg_greenhouse__hiring_team", "alias": "stg_greenhouse__hiring_team", "checksum": {"name": "sha256", "checksum": "2820bc28de45445d0b58cd88c15b3da6746221147ef770171e61b39363354fb9"}, "tags": [], "refs": [["stg_greenhouse__hiring_team_tmp"], ["stg_greenhouse__hiring_team_tmp"]], "sources": [], "metrics": [], "description": "Table capturing users and their roles on job hiring teams.", "columns": {"job_id": {"name": "job_id", "description": "Foreign key referencing the JOB that this team of users is hiring for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "One of - hiring managers, recruiters, coordinators, sourcers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the USER who has this role.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__hiring_team.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.4951072, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__hiring_team_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    job_id\n    \n as \n    \n    job_id\n    \n, \n    \n    \n    role\n    \n as \n    \n    role\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        job_id,\n        role,\n        user_id\n        \n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__hiring_team\""}, "model.greenhouse_source.stg_greenhouse__candidate_tag": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_candidate_tag_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__candidate_tag_tmp", "model.greenhouse_source.stg_greenhouse__candidate_tag_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__candidate_tag"], "unique_id": "model.greenhouse_source.stg_greenhouse__candidate_tag", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_greenhouse__candidate_tag_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__candidate_tag_tmp')),\n                staging_columns=get_candidate_tag_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        candidate_id,\n        tag_id\n        \n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__candidate_tag.sql", "original_file_path": "models/stg_greenhouse__candidate_tag.sql", "name": "stg_greenhouse__candidate_tag", "alias": "stg_greenhouse__candidate_tag", "checksum": {"name": "sha256", "checksum": "861a6ef8d8f09f02b270b583d91c412faa64d232678256b625e3b59907918073"}, "tags": [], "refs": [["stg_greenhouse__candidate_tag_tmp"], ["stg_greenhouse__candidate_tag_tmp"]], "sources": [], "metrics": [], "description": "Table associating candidate's with their attached tags.", "columns": {"candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE who is tagged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tag_id": {"name": "tag_id", "description": "Foreign key referencing the TAG attached to this candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__candidate_tag.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse"}, "created_at": 1671121118.490815, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__candidate_tag_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    candidate_id\n    \n as \n    \n    candidate_id\n    \n, \n    \n    \n    tag_id\n    \n as \n    \n    tag_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        candidate_id,\n        tag_id\n        \n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__candidate_tag\""}, "model.greenhouse_source.stg_greenhouse__office": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.greenhouse_source.get_office_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.greenhouse_source.stg_greenhouse__office_tmp", "model.greenhouse_source.stg_greenhouse__office_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "stg_greenhouse__office"], "unique_id": "model.greenhouse_source.stg_greenhouse__office", "raw_code": "{{ config(enabled=var('greenhouse_using_job_office', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_greenhouse__office_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_greenhouse__office_tmp')),\n                staging_columns=get_office_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        external_id as external_office_id,\n        id as office_id,\n        location_name,\n        name as office_name,\n        parent_id as parent_office_id,\n        primary_contact_user_id\n        \n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "stg_greenhouse__office.sql", "original_file_path": "models/stg_greenhouse__office.sql", "name": "stg_greenhouse__office", "alias": "stg_greenhouse__office", "checksum": {"name": "sha256", "checksum": "6d1de36c9ac75c4b953839b0a43be959554530d947ac4df03c8c0c5f82a4a806"}, "tags": [], "refs": [["stg_greenhouse__office_tmp"], ["stg_greenhouse__office_tmp"]], "sources": [], "metrics": [], "description": "Table capturing an organization's offices.", "columns": {"external_office_id": {"name": "external_office_id", "description": "An arbitrary ID provided by an external source; does not map to another entity in Greenhouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "office_id": {"name": "office_id", "description": "Unique ID of the office.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_name": {"name": "location_name", "description": "The office's location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "office_name": {"name": "office_name", "description": "The office\u2019s name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_office_id": {"name": "parent_office_id", "description": "Self-referencing id of the office's parent office.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_contact_user_id": {"name": "primary_contact_user_id", "description": "Foreign key referencing the id of the USER who will be the primary in-house contact for  this office. This user must be a site-admin.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "greenhouse_source://models/stg_greenhouse.yml", "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse__office.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.508849, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__office_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    location_name\n    \n as \n    \n    location_name\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    primary_contact_user_id\n    \n as \n    \n    primary_contact_user_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        external_id as external_office_id,\n        id as office_id,\n        location_name,\n        name as office_name,\n        parent_id as parent_office_id,\n        primary_contact_user_id\n        \n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__office\""}, "model.greenhouse_source.stg_greenhouse__interview_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.interview"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__interview_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__interview_tmp", "raw_code": "select * from {{ var('interview') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__interview_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__interview_tmp.sql", "name": "stg_greenhouse__interview_tmp", "alias": "stg_greenhouse__interview_tmp", "checksum": {"name": "sha256", "checksum": "d019967999ad4ea1bbfb69a7b896088d9f03cf5c9e4afb4a8037a89c27fc889d"}, "tags": [], "refs": [], "sources": [["greenhouse", "interview"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__interview_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.332721, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"interview\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__interview_tmp\""}, "model.greenhouse_source.stg_greenhouse__department_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.department"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__department_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__department_tmp", "raw_code": "{{ config(enabled=var('greenhouse_using_job_department', True)) }}\n\nselect * from {{ var('department') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__department_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__department_tmp.sql", "name": "stg_greenhouse__department_tmp", "alias": "stg_greenhouse__department_tmp", "checksum": {"name": "sha256", "checksum": "b951f76961c1aa2c7317c2545101475a64805f2fa69e337d2b3b2a120ffd0f46"}, "tags": [], "refs": [], "sources": [["greenhouse", "department"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__department_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.337815, "compiled_code": "\n\nselect * from \"postgres\".\"greenhouse_source_integration_tests\".\"department\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__department_tmp\""}, "model.greenhouse_source.stg_greenhouse__scheduled_interview_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.snowflake_seed_data"], "nodes": ["seed.greenhouse_source_integration_tests.scheduled_interview"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__scheduled_interview_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__scheduled_interview_tmp", "raw_code": "select * from {{ var('scheduled_interview') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__scheduled_interview_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__scheduled_interview_tmp.sql", "name": "stg_greenhouse__scheduled_interview_tmp", "alias": "stg_greenhouse__scheduled_interview_tmp", "checksum": {"name": "sha256", "checksum": "b735734f48a747a58ba72e84a10f07249fb311f8f1cdbeb3f159d330bd242d8c"}, "tags": [], "refs": [["scheduled_interview"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__scheduled_interview_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.341606, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"scheduled_interview\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scheduled_interview_tmp\""}, "model.greenhouse_source.stg_greenhouse__scheduled_interviewer_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.scheduled_interviewer"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__scheduled_interviewer_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__scheduled_interviewer_tmp", "raw_code": "select * from {{ var('scheduled_interviewer') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__scheduled_interviewer_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__scheduled_interviewer_tmp.sql", "name": "stg_greenhouse__scheduled_interviewer_tmp", "alias": "stg_greenhouse__scheduled_interviewer_tmp", "checksum": {"name": "sha256", "checksum": "bc04850f5fc520ca46793f28f589df844d82d63339cb0253d968281ffc9de4e5"}, "tags": [], "refs": [], "sources": [["greenhouse", "scheduled_interviewer"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__scheduled_interviewer_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.34598, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"scheduled_interviewer\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scheduled_interviewer_tmp\""}, "model.greenhouse_source.stg_greenhouse__scorecard_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.scorecard"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__scorecard_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__scorecard_tmp", "raw_code": "select * from {{ var('scorecard') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__scorecard_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__scorecard_tmp.sql", "name": "stg_greenhouse__scorecard_tmp", "alias": "stg_greenhouse__scorecard_tmp", "checksum": {"name": "sha256", "checksum": "ca359dea47ec578618d3bc77e2034263f006d71248e68dbf4153d2391a1a5e3e"}, "tags": [], "refs": [], "sources": [["greenhouse", "scorecard"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__scorecard_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.349259, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"scorecard\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scorecard_tmp\""}, "model.greenhouse_source.stg_greenhouse__hiring_team_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.hiring_team"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__hiring_team_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__hiring_team_tmp", "raw_code": "select * from {{ var('hiring_team') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__hiring_team_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__hiring_team_tmp.sql", "name": "stg_greenhouse__hiring_team_tmp", "alias": "stg_greenhouse__hiring_team_tmp", "checksum": {"name": "sha256", "checksum": "33a9eaccf6128ec9ca0771eeaa65d4fb985992ffdd5de64b4eb61cfe1949d25a"}, "tags": [], "refs": [], "sources": [["greenhouse", "hiring_team"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__hiring_team_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.352484, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"hiring_team\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__hiring_team_tmp\""}, "model.greenhouse_source.stg_greenhouse__eeoc_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.eeoc"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__eeoc_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__eeoc_tmp", "raw_code": "{{ config(enabled=var('greenhouse_using_eeoc', True)) }}\n\nselect * from {{ var('eeoc') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__eeoc_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__eeoc_tmp.sql", "name": "stg_greenhouse__eeoc_tmp", "alias": "stg_greenhouse__eeoc_tmp", "checksum": {"name": "sha256", "checksum": "539f291f6f50b111defe42e780291051114dace45b65e084ead18f849f694f8a"}, "tags": [], "refs": [], "sources": [["greenhouse", "eeoc"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__eeoc_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.356528, "compiled_code": "\n\nselect * from \"postgres\".\"greenhouse_source_integration_tests\".\"eeoc\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__eeoc_tmp\""}, "model.greenhouse_source.stg_greenhouse__job_opening_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.job_opening"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__job_opening_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__job_opening_tmp", "raw_code": "select * from {{ var('job_opening') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__job_opening_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__job_opening_tmp.sql", "name": "stg_greenhouse__job_opening_tmp", "alias": "stg_greenhouse__job_opening_tmp", "checksum": {"name": "sha256", "checksum": "77b81a287cb92a059fc0ef8f85acb75bde59790b6435e27aea2f73bc65662b1a"}, "tags": [], "refs": [], "sources": [["greenhouse", "job_opening"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__job_opening_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.360023, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"job_opening\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_opening_tmp\""}, "model.greenhouse_source.stg_greenhouse__job_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.job"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__job_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__job_tmp", "raw_code": "select * from {{ var('job') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__job_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__job_tmp.sql", "name": "stg_greenhouse__job_tmp", "alias": "stg_greenhouse__job_tmp", "checksum": {"name": "sha256", "checksum": "33b4bea19a959f78c3b2d83c4647d0926bfcdc40f40d3e41449b5e4554b4a5ec"}, "tags": [], "refs": [], "sources": [["greenhouse", "job"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__job_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.363173, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"job\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_tmp\""}, "model.greenhouse_source.stg_greenhouse__source_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.source"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__source_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__source_tmp", "raw_code": "select * from {{ var('source') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__source_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__source_tmp.sql", "name": "stg_greenhouse__source_tmp", "alias": "stg_greenhouse__source_tmp", "checksum": {"name": "sha256", "checksum": "67d62879bf2ff79a216a0cb526a0d2a6ab4ff086731c485afeaacf9070db293e"}, "tags": [], "refs": [], "sources": [["greenhouse", "source"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__source_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.36642, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"source\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__source_tmp\""}, "model.greenhouse_source.stg_greenhouse__tag_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.tag"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__tag_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__tag_tmp", "raw_code": "select * from {{ var('tag') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__tag_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__tag_tmp.sql", "name": "stg_greenhouse__tag_tmp", "alias": "stg_greenhouse__tag_tmp", "checksum": {"name": "sha256", "checksum": "fb8eb0bbd4749ae93ffa667dc0120e90cf521cd074eeac84320120fa846f53a2"}, "tags": [], "refs": [], "sources": [["greenhouse", "tag"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__tag_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.369953, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"tag\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__tag_tmp\""}, "model.greenhouse_source.stg_greenhouse__office_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.office"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__office_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__office_tmp", "raw_code": "{{ config(enabled=var('greenhouse_using_job_office', True)) }}\n\nselect * from {{ var('office') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__office_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__office_tmp.sql", "name": "stg_greenhouse__office_tmp", "alias": "stg_greenhouse__office_tmp", "checksum": {"name": "sha256", "checksum": "15dacb140519e4379433ea130d8ee1939800db376168f0ab47093dac866ede32"}, "tags": [], "refs": [], "sources": [["greenhouse", "office"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__office_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.3731909, "compiled_code": "\n\nselect * from \"postgres\".\"greenhouse_source_integration_tests\".\"office\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__office_tmp\""}, "model.greenhouse_source.stg_greenhouse__activity_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.activity"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__activity_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__activity_tmp", "raw_code": "select * from {{ var('activity') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__activity_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__activity_tmp.sql", "name": "stg_greenhouse__activity_tmp", "alias": "stg_greenhouse__activity_tmp", "checksum": {"name": "sha256", "checksum": "bf06a99681f22e1ea92459f4f04fddda59e1c8b51ff51e3fbf8db76c439792b0"}, "tags": [], "refs": [], "sources": [["greenhouse", "activity"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__activity_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.3867772, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"activity\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__activity_tmp\""}, "model.greenhouse_source.stg_greenhouse__candidate_tag_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.candidate_tag"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__candidate_tag_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__candidate_tag_tmp", "raw_code": "select * from {{ var('candidate_tag') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__candidate_tag_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__candidate_tag_tmp.sql", "name": "stg_greenhouse__candidate_tag_tmp", "alias": "stg_greenhouse__candidate_tag_tmp", "checksum": {"name": "sha256", "checksum": "5730ded22d504ab4ac313651f0a4f0bcf49aac404c9976c1ceeb4925a75f61b0"}, "tags": [], "refs": [], "sources": [["greenhouse", "candidate_tag"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__candidate_tag_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.3901398, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"candidate_tag\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__candidate_tag_tmp\""}, "model.greenhouse_source.stg_greenhouse__attachment_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.attachment"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__attachment_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__attachment_tmp", "raw_code": "select * from {{ var('attachment') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__attachment_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__attachment_tmp.sql", "name": "stg_greenhouse__attachment_tmp", "alias": "stg_greenhouse__attachment_tmp", "checksum": {"name": "sha256", "checksum": "3e818ac4649dadd76eefa0dcb9b63f0cd8068913ef85cc736cda2d54a4fb9c71"}, "tags": [], "refs": [], "sources": [["greenhouse", "attachment"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__attachment_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.393641, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"attachment\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__attachment_tmp\""}, "model.greenhouse_source.stg_greenhouse__job_office_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.job_office"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__job_office_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__job_office_tmp", "raw_code": "{{ config(enabled=var('greenhouse_using_job_office', True)) }}\n\nselect * from {{ var('job_office') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__job_office_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__job_office_tmp.sql", "name": "stg_greenhouse__job_office_tmp", "alias": "stg_greenhouse__job_office_tmp", "checksum": {"name": "sha256", "checksum": "27079d950d87b43d51801de5fee9f2f1d1993ee948766725a3e6ddb7640574cf"}, "tags": [], "refs": [], "sources": [["greenhouse", "job_office"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__job_office_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.397056, "compiled_code": "\n\nselect * from \"postgres\".\"greenhouse_source_integration_tests\".\"job_office\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_office_tmp\""}, "model.greenhouse_source.stg_greenhouse__email_address_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.email_address"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__email_address_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__email_address_tmp", "raw_code": "select * from {{ var('email_address') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__email_address_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__email_address_tmp.sql", "name": "stg_greenhouse__email_address_tmp", "alias": "stg_greenhouse__email_address_tmp", "checksum": {"name": "sha256", "checksum": "86d352cd37a2a5259df8d73c060d4a71dbeaf0fabd2c1617a53c267850e65c4b"}, "tags": [], "refs": [], "sources": [["greenhouse", "email_address"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__email_address_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.4008589, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"email_address\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__email_address_tmp\""}, "model.greenhouse_source.stg_greenhouse__phone_number_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.phone_number"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__phone_number_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__phone_number_tmp", "raw_code": "select * from {{ var('phone_number') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__phone_number_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__phone_number_tmp.sql", "name": "stg_greenhouse__phone_number_tmp", "alias": "stg_greenhouse__phone_number_tmp", "checksum": {"name": "sha256", "checksum": "7b1e0e11337d55b38a4bbb69773bda56c9a945ce23aa25c58531afc733d1eb6c"}, "tags": [], "refs": [], "sources": [["greenhouse", "phone_number"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__phone_number_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.404448, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"phone_number\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__phone_number_tmp\""}, "model.greenhouse_source.stg_greenhouse__prospect_pool_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.prospect_pool"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__prospect_pool_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__prospect_pool_tmp", "raw_code": "{{ config(enabled=var('greenhouse_using_prospects', True)) }}\n\nselect * from {{ var('prospect_pool') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__prospect_pool_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__prospect_pool_tmp.sql", "name": "stg_greenhouse__prospect_pool_tmp", "alias": "stg_greenhouse__prospect_pool_tmp", "checksum": {"name": "sha256", "checksum": "a6b41ee104fad301844697bf2f525ad69c46616d1295566a19cb74182a86b517"}, "tags": [], "refs": [], "sources": [["greenhouse", "prospect_pool"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__prospect_pool_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.408993, "compiled_code": "\n\nselect * from \"postgres\".\"greenhouse_source_integration_tests\".\"prospect_pool\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__prospect_pool_tmp\""}, "model.greenhouse_source.stg_greenhouse__social_media_address_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.social_media_address"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__social_media_address_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__social_media_address_tmp", "raw_code": "select * from {{ var('social_media_address') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__social_media_address_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__social_media_address_tmp.sql", "name": "stg_greenhouse__social_media_address_tmp", "alias": "stg_greenhouse__social_media_address_tmp", "checksum": {"name": "sha256", "checksum": "c0d89f248961c64a20badde9b2cc399b0fcacad9597d707cec1380a9b47bd14b"}, "tags": [], "refs": [], "sources": [["greenhouse", "social_media_address"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__social_media_address_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.413881, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"social_media_address\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__social_media_address_tmp\""}, "model.greenhouse_source.stg_greenhouse__prospect_stage_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.prospect_stage"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__prospect_stage_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__prospect_stage_tmp", "raw_code": "{{ config(enabled=var('greenhouse_using_prospects', True)) }}\n\nselect * from {{ var('prospect_stage') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__prospect_stage_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__prospect_stage_tmp.sql", "name": "stg_greenhouse__prospect_stage_tmp", "alias": "stg_greenhouse__prospect_stage_tmp", "checksum": {"name": "sha256", "checksum": "01154a58fb5175e2a0e17a85440d0350055f32b805dbe7e4a5a7580a4bc9459e"}, "tags": [], "refs": [], "sources": [["greenhouse", "prospect_stage"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__prospect_stage_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.418329, "compiled_code": "\n\nselect * from \"postgres\".\"greenhouse_source_integration_tests\".\"prospect_stage\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__prospect_stage_tmp\""}, "model.greenhouse_source.stg_greenhouse__job_application_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.job_application"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__job_application_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__job_application_tmp", "raw_code": "select * from {{ var('job_application') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__job_application_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__job_application_tmp.sql", "name": "stg_greenhouse__job_application_tmp", "alias": "stg_greenhouse__job_application_tmp", "checksum": {"name": "sha256", "checksum": "c34bb337faf0b7e9c6694d5a9d19cd32c5e57cf633e642e10a5ebdaabe834f37"}, "tags": [], "refs": [], "sources": [["greenhouse", "job_application"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__job_application_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.423846, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"job_application\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_application_tmp\""}, "model.greenhouse_source.stg_greenhouse__job_stage_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.job_stage"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__job_stage_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__job_stage_tmp", "raw_code": "select * from {{ var('job_stage') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__job_stage_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__job_stage_tmp.sql", "name": "stg_greenhouse__job_stage_tmp", "alias": "stg_greenhouse__job_stage_tmp", "checksum": {"name": "sha256", "checksum": "d837fcab9586f1ba9533dacb5dc146bb6dfe00d4064708197df40a6774a30741"}, "tags": [], "refs": [], "sources": [["greenhouse", "job_stage"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__job_stage_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.428544, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"job_stage\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_stage_tmp\""}, "model.greenhouse_source.stg_greenhouse__user_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.user"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__user_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__user_tmp", "raw_code": "select * from {{ var('user') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__user_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__user_tmp.sql", "name": "stg_greenhouse__user_tmp", "alias": "stg_greenhouse__user_tmp", "checksum": {"name": "sha256", "checksum": "8edcb90c9c99e9587b1b388c503148cd57d5dbf8a3449495262a3d71dcf1a357"}, "tags": [], "refs": [], "sources": [["greenhouse", "user"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__user_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.432949, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"user\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__user_tmp\""}, "model.greenhouse_source.stg_greenhouse__job_post_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.job_post"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__job_post_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__job_post_tmp", "raw_code": "select * from {{ var('job_post') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__job_post_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__job_post_tmp.sql", "name": "stg_greenhouse__job_post_tmp", "alias": "stg_greenhouse__job_post_tmp", "checksum": {"name": "sha256", "checksum": "2dc9b0339b5799645bf171141cd4f4b0741b8f98d94c04e7479d176980e2c73a"}, "tags": [], "refs": [], "sources": [["greenhouse", "job_post"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__job_post_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.4384372, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"job_post\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_post_tmp\""}, "model.greenhouse_source.stg_greenhouse__job_department_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.job_department"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__job_department_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__job_department_tmp", "raw_code": "{{ config(enabled=var('greenhouse_using_job_department', True)) }}\n\nselect * from {{ var('job_department') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__job_department_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__job_department_tmp.sql", "name": "stg_greenhouse__job_department_tmp", "alias": "stg_greenhouse__job_department_tmp", "checksum": {"name": "sha256", "checksum": "138382bee1d55668f544e1987c807c0813785c902dcf69ebd603ea90cf8dee35"}, "tags": [], "refs": [], "sources": [["greenhouse", "job_department"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__job_department_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.444735, "compiled_code": "\n\nselect * from \"postgres\".\"greenhouse_source_integration_tests\".\"job_department\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_department_tmp\""}, "model.greenhouse_source.stg_greenhouse__scorecard_attribute_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.scorecard_attribute"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__scorecard_attribute_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__scorecard_attribute_tmp", "raw_code": "select * from {{ var('scorecard_attribute') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__scorecard_attribute_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__scorecard_attribute_tmp.sql", "name": "stg_greenhouse__scorecard_attribute_tmp", "alias": "stg_greenhouse__scorecard_attribute_tmp", "checksum": {"name": "sha256", "checksum": "73b6a79769553c004ac95eca02c44d8d9835ac131dd993282c9265412e793ca0"}, "tags": [], "refs": [], "sources": [["greenhouse", "scorecard_attribute"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__scorecard_attribute_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.449484, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"scorecard_attribute\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scorecard_attribute_tmp\""}, "model.greenhouse_source.stg_greenhouse__application_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.application"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__application_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__application_tmp", "raw_code": "select * from {{ var('application') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__application_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__application_tmp.sql", "name": "stg_greenhouse__application_tmp", "alias": "stg_greenhouse__application_tmp", "checksum": {"name": "sha256", "checksum": "fa0d2a9e0f3dde8af89d4c39e1c0e0074717bb49eaa3b436de9ed4a9a0b1def0"}, "tags": [], "refs": [], "sources": [["greenhouse", "application"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__application_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.455096, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"application\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__application_tmp\""}, "model.greenhouse_source.stg_greenhouse__user_email_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.user_email"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__user_email_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__user_email_tmp", "raw_code": "select * from {{ var('user_email') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__user_email_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__user_email_tmp.sql", "name": "stg_greenhouse__user_email_tmp", "alias": "stg_greenhouse__user_email_tmp", "checksum": {"name": "sha256", "checksum": "2533c7cc7a83fd331d583dcfaa335af705342a866a2866e922583e4a3f9c3ae9"}, "tags": [], "refs": [], "sources": [["greenhouse", "user_email"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__user_email_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.460272, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"user_email\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__user_email_tmp\""}, "model.greenhouse_source.stg_greenhouse__candidate_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.candidate"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__candidate_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__candidate_tmp", "raw_code": "select * from {{ var('candidate') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__candidate_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__candidate_tmp.sql", "name": "stg_greenhouse__candidate_tmp", "alias": "stg_greenhouse__candidate_tmp", "checksum": {"name": "sha256", "checksum": "4a323e3d7c1e4e93c24aa3899d24323b20920577d1ec63d927902d32b893fbfd"}, "tags": [], "refs": [], "sources": [["greenhouse", "candidate"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__candidate_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse"}, "created_at": 1671121118.464344, "compiled_code": "select * from \"postgres\".\"greenhouse_source_integration_tests\".\"candidate\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__candidate_tmp\""}, "model.greenhouse_source.stg_greenhouse__application_history_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.greenhouse_source.greenhouse.application_history"]}, "config": {"enabled": true, "alias": null, "schema": "stg_greenhouse", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests_stg_greenhouse", "fqn": ["greenhouse_source", "tmp", "stg_greenhouse__application_history_tmp"], "unique_id": "model.greenhouse_source.stg_greenhouse__application_history_tmp", "raw_code": "{{ config(enabled=var('greenhouse_using_app_history', True)) }}\n\nselect * from {{ var('application_history') }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "tmp/stg_greenhouse__application_history_tmp.sql", "original_file_path": "models/tmp/stg_greenhouse__application_history_tmp.sql", "name": "stg_greenhouse__application_history_tmp", "alias": "stg_greenhouse__application_history_tmp", "checksum": {"name": "sha256", "checksum": "36dc7194bfce77f0e9760485f61a73d6583ff39b84f0d71344943a17dd0133a9"}, "tags": [], "refs": [], "sources": [["greenhouse", "application_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/tmp/stg_greenhouse__application_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_greenhouse", "enabled": true}, "created_at": 1671121118.470021, "compiled_code": "\n\nselect * from \"postgres\".\"greenhouse_source_integration_tests\".\"application_history\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__application_history_tmp\""}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__activity_activity_id__candidate_id.079b550f76": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["activity_id", "candidate_id"], "model": "{{ get_where_subquery(ref('stg_greenhouse__activity')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__activity"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8168ea2f913649301ded08c67a564397", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__activity_activity_id__candidate_id"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__activity_activity_id__candidate_id.079b550f76", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8168ea2f913649301ded08c67a564397\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_8168ea2f913649301ded08c67a564397.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__activity_activity_id__candidate_id", "alias": "dbt_utils_unique_combination_o_8168ea2f913649301ded08c67a564397", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__activity"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_8168ea2f913649301ded08c67a564397.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8168ea2f913649301ded08c67a564397"}, "created_at": 1671121118.527134, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        activity_id, candidate_id\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__activity\"\n    group by activity_id, candidate_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__activity"}, "test.greenhouse_source.unique_stg_greenhouse__application_application_id.4b79b229f7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "application_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__application_application_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__application_application_id.4b79b229f7", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__application_application_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__application_application_id", "alias": "unique_stg_greenhouse__application_application_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__application_application_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.535549, "compiled_code": "\n    \n    \n\nselect\n    application_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__application\"\nwhere application_id is not null\ngroup by application_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "application_id", "file_key_name": "models.stg_greenhouse__application"}, "test.greenhouse_source.not_null_stg_greenhouse__application_application_id.b3e0f342cb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "application_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__application')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__application"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__application_application_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__application_application_id.b3e0f342cb", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__application_application_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__application_application_id", "alias": "not_null_stg_greenhouse__application_application_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__application_application_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.536737, "compiled_code": "\n    \n    \n\n\n\nselect application_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__application\"\nwhere application_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "application_id", "file_key_name": "models.stg_greenhouse__application"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__application_history_application_id__updated_at.163299738f": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["application_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_greenhouse__application_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__application_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_08249f15cbf7aa530cb0dcb5d95c834e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__application_history_application_id__updated_at"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__application_history_application_id__updated_at.163299738f", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_08249f15cbf7aa530cb0dcb5d95c834e\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_08249f15cbf7aa530cb0dcb5d95c834e.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__application_history_application_id__updated_at", "alias": "dbt_utils_unique_combination_o_08249f15cbf7aa530cb0dcb5d95c834e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__application_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_08249f15cbf7aa530cb0dcb5d95c834e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_08249f15cbf7aa530cb0dcb5d95c834e"}, "created_at": 1671121118.537749, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        application_id, updated_at\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__application_history\"\n    group by application_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__application_history"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__attachment_candidate_id__index.15bb9a87dc": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["candidate_id", "index"], "model": "{{ get_where_subquery(ref('stg_greenhouse__attachment')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__attachment"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fe2a29f761e702605c4023be67536c0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__attachment_candidate_id__index"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__attachment_candidate_id__index.15bb9a87dc", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fe2a29f761e702605c4023be67536c0f\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_fe2a29f761e702605c4023be67536c0f.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__attachment_candidate_id__index", "alias": "dbt_utils_unique_combination_o_fe2a29f761e702605c4023be67536c0f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__attachment"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_fe2a29f761e702605c4023be67536c0f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fe2a29f761e702605c4023be67536c0f"}, "created_at": 1671121118.54091, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        candidate_id, index\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__attachment\"\n    group by candidate_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__attachment"}, "test.greenhouse_source.unique_stg_greenhouse__candidate_candidate_id.506731b04d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "candidate_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__candidate')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__candidate"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__candidate_candidate_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__candidate_candidate_id.506731b04d", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__candidate_candidate_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__candidate_candidate_id", "alias": "unique_stg_greenhouse__candidate_candidate_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__candidate"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__candidate_candidate_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.5442061, "compiled_code": "\n    \n    \n\nselect\n    candidate_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__candidate\"\nwhere candidate_id is not null\ngroup by candidate_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "candidate_id", "file_key_name": "models.stg_greenhouse__candidate"}, "test.greenhouse_source.not_null_stg_greenhouse__candidate_candidate_id.11734ea8f8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "candidate_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__candidate')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__candidate"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__candidate_candidate_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__candidate_candidate_id.11734ea8f8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__candidate_candidate_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__candidate_candidate_id", "alias": "not_null_stg_greenhouse__candidate_candidate_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__candidate"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__candidate_candidate_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.545259, "compiled_code": "\n    \n    \n\n\n\nselect candidate_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__candidate\"\nwhere candidate_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "candidate_id", "file_key_name": "models.stg_greenhouse__candidate"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__candidate_tag_candidate_id__tag_id.6579700f5f": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["candidate_id", "tag_id"], "model": "{{ get_where_subquery(ref('stg_greenhouse__candidate_tag')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__candidate_tag"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0a36a9b44a2a60045577c90ba953d5e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__candidate_tag_candidate_id__tag_id"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__candidate_tag_candidate_id__tag_id.6579700f5f", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0a36a9b44a2a60045577c90ba953d5e3\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_0a36a9b44a2a60045577c90ba953d5e3.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__candidate_tag_candidate_id__tag_id", "alias": "dbt_utils_unique_combination_o_0a36a9b44a2a60045577c90ba953d5e3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__candidate_tag"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_0a36a9b44a2a60045577c90ba953d5e3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0a36a9b44a2a60045577c90ba953d5e3"}, "created_at": 1671121118.546266, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        candidate_id, tag_id\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__candidate_tag\"\n    group by candidate_id, tag_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__candidate_tag"}, "test.greenhouse_source.unique_stg_greenhouse__department_department_id.45ce77a4ba": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "department_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__department')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__department"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__department_department_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__department_department_id.45ce77a4ba", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__department_department_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__department_department_id", "alias": "unique_stg_greenhouse__department_department_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__department"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__department_department_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.549324, "compiled_code": "\n    \n    \n\nselect\n    department_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__department\"\nwhere department_id is not null\ngroup by department_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "department_id", "file_key_name": "models.stg_greenhouse__department"}, "test.greenhouse_source.not_null_stg_greenhouse__department_department_id.a66163e3c8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "department_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__department')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__department"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__department_department_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__department_department_id.a66163e3c8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__department_department_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__department_department_id", "alias": "not_null_stg_greenhouse__department_department_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__department"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__department_department_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.55037, "compiled_code": "\n    \n    \n\n\n\nselect department_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__department\"\nwhere department_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "department_id", "file_key_name": "models.stg_greenhouse__department"}, "test.greenhouse_source.unique_stg_greenhouse__eeoc_application_id.ce57333d9e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "application_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__eeoc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__eeoc"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__eeoc_application_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__eeoc_application_id.ce57333d9e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__eeoc_application_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__eeoc_application_id", "alias": "unique_stg_greenhouse__eeoc_application_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__eeoc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__eeoc_application_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.551625, "compiled_code": "\n    \n    \n\nselect\n    application_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__eeoc\"\nwhere application_id is not null\ngroup by application_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "application_id", "file_key_name": "models.stg_greenhouse__eeoc"}, "test.greenhouse_source.not_null_stg_greenhouse__eeoc_application_id.e480771a64": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "application_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__eeoc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__eeoc"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__eeoc_application_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__eeoc_application_id.e480771a64", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__eeoc_application_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__eeoc_application_id", "alias": "not_null_stg_greenhouse__eeoc_application_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__eeoc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__eeoc_application_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.553049, "compiled_code": "\n    \n    \n\n\n\nselect application_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__eeoc\"\nwhere application_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "application_id", "file_key_name": "models.stg_greenhouse__eeoc"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__email_address_candidate_id__index.d7b76f0532": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["candidate_id", "index"], "model": "{{ get_where_subquery(ref('stg_greenhouse__email_address')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__email_address"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4152f27b2ebf74ee5b9e6525c8d2aa89", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__email_address_candidate_id__index"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__email_address_candidate_id__index.d7b76f0532", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4152f27b2ebf74ee5b9e6525c8d2aa89\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_4152f27b2ebf74ee5b9e6525c8d2aa89.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__email_address_candidate_id__index", "alias": "dbt_utils_unique_combination_o_4152f27b2ebf74ee5b9e6525c8d2aa89", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__email_address"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_4152f27b2ebf74ee5b9e6525c8d2aa89.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4152f27b2ebf74ee5b9e6525c8d2aa89"}, "created_at": 1671121118.554124, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        candidate_id, index\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__email_address\"\n    group by candidate_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__email_address"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__hiring_team_job_id__role__user_id.090b0cec6e": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["job_id", "role", "user_id"], "model": "{{ get_where_subquery(ref('stg_greenhouse__hiring_team')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__hiring_team"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a3ac7b399d697521a18c8a1acc13e25b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__hiring_team_job_id__role__user_id"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__hiring_team_job_id__role__user_id.090b0cec6e", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a3ac7b399d697521a18c8a1acc13e25b\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_a3ac7b399d697521a18c8a1acc13e25b.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__hiring_team_job_id__role__user_id", "alias": "dbt_utils_unique_combination_o_a3ac7b399d697521a18c8a1acc13e25b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__hiring_team"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_a3ac7b399d697521a18c8a1acc13e25b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a3ac7b399d697521a18c8a1acc13e25b"}, "created_at": 1671121118.557295, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        job_id, role, user_id\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__hiring_team\"\n    group by job_id, role, user_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__hiring_team"}, "test.greenhouse_source.unique_stg_greenhouse__interview_interview_id.bc31a3a9c8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "interview_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__interview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__interview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__interview_interview_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__interview_interview_id.bc31a3a9c8", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__interview_interview_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__interview_interview_id", "alias": "unique_stg_greenhouse__interview_interview_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__interview"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__interview_interview_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.560244, "compiled_code": "\n    \n    \n\nselect\n    interview_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__interview\"\nwhere interview_id is not null\ngroup by interview_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "interview_id", "file_key_name": "models.stg_greenhouse__interview"}, "test.greenhouse_source.not_null_stg_greenhouse__interview_interview_id.9982dfcc43": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "interview_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__interview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__interview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__interview_interview_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__interview_interview_id.9982dfcc43", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__interview_interview_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__interview_interview_id", "alias": "not_null_stg_greenhouse__interview_interview_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__interview"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__interview_interview_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.561215, "compiled_code": "\n    \n    \n\n\n\nselect interview_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__interview\"\nwhere interview_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "interview_id", "file_key_name": "models.stg_greenhouse__interview"}, "test.greenhouse_source.unique_stg_greenhouse__job_job_id.a5e80b818d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "job_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__job')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__job"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__job_job_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__job_job_id.a5e80b818d", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__job_job_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__job_job_id", "alias": "unique_stg_greenhouse__job_job_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__job"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__job_job_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.562569, "compiled_code": "\n    \n    \n\nselect\n    job_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job\"\nwhere job_id is not null\ngroup by job_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "job_id", "file_key_name": "models.stg_greenhouse__job"}, "test.greenhouse_source.not_null_stg_greenhouse__job_job_id.fbeab127ff": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__job')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__job"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__job_job_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__job_job_id.fbeab127ff", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__job_job_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__job_job_id", "alias": "not_null_stg_greenhouse__job_job_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__job"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__job_job_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.56417, "compiled_code": "\n    \n    \n\n\n\nselect job_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job\"\nwhere job_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "job_id", "file_key_name": "models.stg_greenhouse__job"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_application_application_id__job_id.604a067fbe": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["application_id", "job_id"], "model": "{{ get_where_subquery(ref('stg_greenhouse__job_application')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_application"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7d036266bb60069cd0b4fc4a845c3e56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__job_application_application_id__job_id"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_application_application_id__job_id.604a067fbe", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7d036266bb60069cd0b4fc4a845c3e56\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_7d036266bb60069cd0b4fc4a845c3e56.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__job_application_application_id__job_id", "alias": "dbt_utils_unique_combination_o_7d036266bb60069cd0b4fc4a845c3e56", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__job_application"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_7d036266bb60069cd0b4fc4a845c3e56.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7d036266bb60069cd0b4fc4a845c3e56"}, "created_at": 1671121118.565183, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        application_id, job_id\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_application\"\n    group by application_id, job_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__job_application"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_department_department_id__job_id.c7e6f4ae13": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["department_id", "job_id"], "model": "{{ get_where_subquery(ref('stg_greenhouse__job_department')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_department"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_12ac7f4eb0dc495ee71a99655d421406", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__job_department_department_id__job_id"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_department_department_id__job_id.c7e6f4ae13", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_12ac7f4eb0dc495ee71a99655d421406\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_12ac7f4eb0dc495ee71a99655d421406.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__job_department_department_id__job_id", "alias": "dbt_utils_unique_combination_o_12ac7f4eb0dc495ee71a99655d421406", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__job_department"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_12ac7f4eb0dc495ee71a99655d421406.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_12ac7f4eb0dc495ee71a99655d421406"}, "created_at": 1671121118.568397, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        department_id, job_id\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_department\"\n    group by department_id, job_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__job_department"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_office_office_id__job_id.b93625d1da": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["office_id", "job_id"], "model": "{{ get_where_subquery(ref('stg_greenhouse__job_office')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_office"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_32d2cade3c858a260cd9ad315bde9d73", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__job_office_office_id__job_id"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_office_office_id__job_id.b93625d1da", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_32d2cade3c858a260cd9ad315bde9d73\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_32d2cade3c858a260cd9ad315bde9d73.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__job_office_office_id__job_id", "alias": "dbt_utils_unique_combination_o_32d2cade3c858a260cd9ad315bde9d73", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__job_office"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_32d2cade3c858a260cd9ad315bde9d73.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_32d2cade3c858a260cd9ad315bde9d73"}, "created_at": 1671121118.5716321, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        office_id, job_id\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_office\"\n    group by office_id, job_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__job_office"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_opening_job_openining_id__job_id.6bc56bb4af": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["job_openining_id", "job_id"], "model": "{{ get_where_subquery(ref('stg_greenhouse__job_opening')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_opening"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f9a073617a89436c8c22bce58188f0ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__job_opening_job_openining_id__job_id"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_opening_job_openining_id__job_id.6bc56bb4af", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f9a073617a89436c8c22bce58188f0ee\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_f9a073617a89436c8c22bce58188f0ee.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__job_opening_job_openining_id__job_id", "alias": "dbt_utils_unique_combination_o_f9a073617a89436c8c22bce58188f0ee", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__job_opening"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_f9a073617a89436c8c22bce58188f0ee.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f9a073617a89436c8c22bce58188f0ee"}, "created_at": 1671121118.575084, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        job_openining_id, job_id\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_opening\"\n    group by job_openining_id, job_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__job_opening"}, "test.greenhouse_source.unique_stg_greenhouse__job_post_job_post_id.7b0cddbb02": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "job_post_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__job_post')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_post"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__job_post_job_post_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__job_post_job_post_id.7b0cddbb02", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__job_post_job_post_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__job_post_job_post_id", "alias": "unique_stg_greenhouse__job_post_job_post_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__job_post"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__job_post_job_post_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.5781472, "compiled_code": "\n    \n    \n\nselect\n    job_post_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_post\"\nwhere job_post_id is not null\ngroup by job_post_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "job_post_id", "file_key_name": "models.stg_greenhouse__job_post"}, "test.greenhouse_source.not_null_stg_greenhouse__job_post_job_post_id.fefcc39e72": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_post_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__job_post')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_post"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__job_post_job_post_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__job_post_job_post_id.fefcc39e72", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__job_post_job_post_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__job_post_job_post_id", "alias": "not_null_stg_greenhouse__job_post_job_post_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__job_post"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__job_post_job_post_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.5792372, "compiled_code": "\n    \n    \n\n\n\nselect job_post_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_post\"\nwhere job_post_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "job_post_id", "file_key_name": "models.stg_greenhouse__job_post"}, "test.greenhouse_source.unique_stg_greenhouse__job_stage_job_stage_id.960a4cbb30": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "job_stage_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__job_stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_stage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__job_stage_job_stage_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__job_stage_job_stage_id.960a4cbb30", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__job_stage_job_stage_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__job_stage_job_stage_id", "alias": "unique_stg_greenhouse__job_stage_job_stage_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__job_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__job_stage_job_stage_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.580191, "compiled_code": "\n    \n    \n\nselect\n    job_stage_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_stage\"\nwhere job_stage_id is not null\ngroup by job_stage_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "job_stage_id", "file_key_name": "models.stg_greenhouse__job_stage"}, "test.greenhouse_source.not_null_stg_greenhouse__job_stage_job_stage_id.f662323acb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_stage_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__job_stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__job_stage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__job_stage_job_stage_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__job_stage_job_stage_id.f662323acb", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__job_stage_job_stage_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__job_stage_job_stage_id", "alias": "not_null_stg_greenhouse__job_stage_job_stage_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__job_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__job_stage_job_stage_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.581126, "compiled_code": "\n    \n    \n\n\n\nselect job_stage_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__job_stage\"\nwhere job_stage_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "job_stage_id", "file_key_name": "models.stg_greenhouse__job_stage"}, "test.greenhouse_source.unique_stg_greenhouse__office_office_id.0ab9fd9683": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "office_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__office')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__office"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__office_office_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__office_office_id.0ab9fd9683", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__office_office_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__office_office_id", "alias": "unique_stg_greenhouse__office_office_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__office"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__office_office_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.58229, "compiled_code": "\n    \n    \n\nselect\n    office_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__office\"\nwhere office_id is not null\ngroup by office_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "office_id", "file_key_name": "models.stg_greenhouse__office"}, "test.greenhouse_source.not_null_stg_greenhouse__office_office_id.fc83d3c38a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "office_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__office')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__office"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__office_office_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__office_office_id.fc83d3c38a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__office_office_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__office_office_id", "alias": "not_null_stg_greenhouse__office_office_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__office"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__office_office_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.58365, "compiled_code": "\n    \n    \n\n\n\nselect office_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__office\"\nwhere office_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "office_id", "file_key_name": "models.stg_greenhouse__office"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__phone_number_candidate_id__index.2f9b07d2c4": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["candidate_id", "index"], "model": "{{ get_where_subquery(ref('stg_greenhouse__phone_number')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__phone_number"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_10c19211889bc246ced8e579870f5444", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__phone_number_candidate_id__index"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__phone_number_candidate_id__index.2f9b07d2c4", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_10c19211889bc246ced8e579870f5444\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_10c19211889bc246ced8e579870f5444.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__phone_number_candidate_id__index", "alias": "dbt_utils_unique_combination_o_10c19211889bc246ced8e579870f5444", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__phone_number"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_10c19211889bc246ced8e579870f5444.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_10c19211889bc246ced8e579870f5444"}, "created_at": 1671121118.584645, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        candidate_id, index\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__phone_number\"\n    group by candidate_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__phone_number"}, "test.greenhouse_source.unique_stg_greenhouse__scheduled_interview_scheduled_interview_id.3fb531b522": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "scheduled_interview_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__scheduled_interview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__scheduled_interview"]}, "config": {"enabled": true, "alias": "unique_stg_greenhouse__schedul_e2bdf56e471bbcedec6dfc12539f3a91", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__scheduled_interview_scheduled_interview_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__scheduled_interview_scheduled_interview_id.3fb531b522", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_greenhouse__schedul_e2bdf56e471bbcedec6dfc12539f3a91\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__schedul_e2bdf56e471bbcedec6dfc12539f3a91.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__scheduled_interview_scheduled_interview_id", "alias": "unique_stg_greenhouse__schedul_e2bdf56e471bbcedec6dfc12539f3a91", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__scheduled_interview"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__schedul_e2bdf56e471bbcedec6dfc12539f3a91.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_greenhouse__schedul_e2bdf56e471bbcedec6dfc12539f3a91"}, "created_at": 1671121118.587734, "compiled_code": "\n    \n    \n\nselect\n    scheduled_interview_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scheduled_interview\"\nwhere scheduled_interview_id is not null\ngroup by scheduled_interview_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "scheduled_interview_id", "file_key_name": "models.stg_greenhouse__scheduled_interview"}, "test.greenhouse_source.not_null_stg_greenhouse__scheduled_interview_scheduled_interview_id.295891e7f5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scheduled_interview_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__scheduled_interview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__scheduled_interview"]}, "config": {"enabled": true, "alias": "not_null_stg_greenhouse__sched_7987f45ed6ac74fe24a35942bb327396", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__scheduled_interview_scheduled_interview_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__scheduled_interview_scheduled_interview_id.295891e7f5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_greenhouse__sched_7987f45ed6ac74fe24a35942bb327396\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__sched_7987f45ed6ac74fe24a35942bb327396.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__scheduled_interview_scheduled_interview_id", "alias": "not_null_stg_greenhouse__sched_7987f45ed6ac74fe24a35942bb327396", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__scheduled_interview"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__sched_7987f45ed6ac74fe24a35942bb327396.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_greenhouse__sched_7987f45ed6ac74fe24a35942bb327396"}, "created_at": 1671121118.588753, "compiled_code": "\n    \n    \n\n\n\nselect scheduled_interview_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scheduled_interview\"\nwhere scheduled_interview_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "scheduled_interview_id", "file_key_name": "models.stg_greenhouse__scheduled_interview"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__scheduled_interviewer_interviewer_user_id__scheduled_interview_id.d2eba190d2": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["interviewer_user_id", "scheduled_interview_id"], "model": "{{ get_where_subquery(ref('stg_greenhouse__scheduled_interviewer')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__scheduled_interviewer"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_03bb4388f92bcb77af395234762c8b04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__scheduled_interviewer_interviewer_user_id__scheduled_interview_id"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__scheduled_interviewer_interviewer_user_id__scheduled_interview_id.d2eba190d2", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_03bb4388f92bcb77af395234762c8b04\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_03bb4388f92bcb77af395234762c8b04.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__scheduled_interviewer_interviewer_user_id__scheduled_interview_id", "alias": "dbt_utils_unique_combination_o_03bb4388f92bcb77af395234762c8b04", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__scheduled_interviewer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_03bb4388f92bcb77af395234762c8b04.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_03bb4388f92bcb77af395234762c8b04"}, "created_at": 1671121118.589769, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        interviewer_user_id, scheduled_interview_id\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scheduled_interviewer\"\n    group by interviewer_user_id, scheduled_interview_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__scheduled_interviewer"}, "test.greenhouse_source.unique_stg_greenhouse__scorecard_scorecard_id.08770cba63": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "scorecard_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__scorecard')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__scorecard"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__scorecard_scorecard_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__scorecard_scorecard_id.08770cba63", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__scorecard_scorecard_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__scorecard_scorecard_id", "alias": "unique_stg_greenhouse__scorecard_scorecard_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__scorecard"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__scorecard_scorecard_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.592544, "compiled_code": "\n    \n    \n\nselect\n    scorecard_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scorecard\"\nwhere scorecard_id is not null\ngroup by scorecard_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "scorecard_id", "file_key_name": "models.stg_greenhouse__scorecard"}, "test.greenhouse_source.not_null_stg_greenhouse__scorecard_scorecard_id.d8b028c712": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scorecard_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__scorecard')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__scorecard"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__scorecard_scorecard_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__scorecard_scorecard_id.d8b028c712", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__scorecard_scorecard_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__scorecard_scorecard_id", "alias": "not_null_stg_greenhouse__scorecard_scorecard_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__scorecard"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__scorecard_scorecard_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.593513, "compiled_code": "\n    \n    \n\n\n\nselect scorecard_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scorecard\"\nwhere scorecard_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "scorecard_id", "file_key_name": "models.stg_greenhouse__scorecard"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__scorecard_attribute_scorecard_id__index.5f650990bb": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["scorecard_id", "index"], "model": "{{ get_where_subquery(ref('stg_greenhouse__scorecard_attribute')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__scorecard_attribute"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_20ed68a8b69b2091bdb42ecd948859a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__scorecard_attribute_scorecard_id__index"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__scorecard_attribute_scorecard_id__index.5f650990bb", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_20ed68a8b69b2091bdb42ecd948859a4\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_20ed68a8b69b2091bdb42ecd948859a4.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__scorecard_attribute_scorecard_id__index", "alias": "dbt_utils_unique_combination_o_20ed68a8b69b2091bdb42ecd948859a4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__scorecard_attribute"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_20ed68a8b69b2091bdb42ecd948859a4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_20ed68a8b69b2091bdb42ecd948859a4"}, "created_at": 1671121118.594644, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        scorecard_id, index\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__scorecard_attribute\"\n    group by scorecard_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__scorecard_attribute"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__social_media_address_candidate_id__index.07ae86df8f": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["candidate_id", "index"], "model": "{{ get_where_subquery(ref('stg_greenhouse__social_media_address')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__social_media_address"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_59670e52451705ea023dbf06194a66cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__social_media_address_candidate_id__index"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__social_media_address_candidate_id__index.07ae86df8f", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_59670e52451705ea023dbf06194a66cd\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_59670e52451705ea023dbf06194a66cd.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__social_media_address_candidate_id__index", "alias": "dbt_utils_unique_combination_o_59670e52451705ea023dbf06194a66cd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__social_media_address"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_59670e52451705ea023dbf06194a66cd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_59670e52451705ea023dbf06194a66cd"}, "created_at": 1671121118.597353, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        candidate_id, index\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__social_media_address\"\n    group by candidate_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__social_media_address"}, "test.greenhouse_source.unique_stg_greenhouse__source_source_id.1e9ea7d264": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "source_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__source')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__source"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__source_source_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__source_source_id.1e9ea7d264", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__source_source_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__source_source_id", "alias": "unique_stg_greenhouse__source_source_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__source"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__source_source_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.600078, "compiled_code": "\n    \n    \n\nselect\n    source_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__source\"\nwhere source_id is not null\ngroup by source_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "source_id", "file_key_name": "models.stg_greenhouse__source"}, "test.greenhouse_source.not_null_stg_greenhouse__source_source_id.3a35179705": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "source_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__source')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__source"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__source_source_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__source_source_id.3a35179705", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__source_source_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__source_source_id", "alias": "not_null_stg_greenhouse__source_source_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__source"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__source_source_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.601069, "compiled_code": "\n    \n    \n\n\n\nselect source_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__source\"\nwhere source_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "source_id", "file_key_name": "models.stg_greenhouse__source"}, "test.greenhouse_source.unique_stg_greenhouse__tag_tag_id.786c77d151": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "tag_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__tag')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__tag"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__tag_tag_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__tag_tag_id.786c77d151", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__tag_tag_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__tag_tag_id", "alias": "unique_stg_greenhouse__tag_tag_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__tag"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__tag_tag_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.6021812, "compiled_code": "\n    \n    \n\nselect\n    tag_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__tag\"\nwhere tag_id is not null\ngroup by tag_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tag_id", "file_key_name": "models.stg_greenhouse__tag"}, "test.greenhouse_source.not_null_stg_greenhouse__tag_tag_id.c64705ac22": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tag_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__tag')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__tag"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__tag_tag_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__tag_tag_id.c64705ac22", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__tag_tag_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__tag_tag_id", "alias": "not_null_stg_greenhouse__tag_tag_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__tag"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__tag_tag_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.603155, "compiled_code": "\n    \n    \n\n\n\nselect tag_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__tag\"\nwhere tag_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tag_id", "file_key_name": "models.stg_greenhouse__tag"}, "test.greenhouse_source.unique_stg_greenhouse__user_user_id.e1e33a654c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__user_user_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__user_user_id.e1e33a654c", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__user_user_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__user_user_id", "alias": "unique_stg_greenhouse__user_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__user_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.6041238, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__user\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.stg_greenhouse__user"}, "test.greenhouse_source.not_null_stg_greenhouse__user_user_id.de3470de6a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__user_user_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__user_user_id.de3470de6a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__user_user_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__user_user_id", "alias": "not_null_stg_greenhouse__user_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__user_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.605084, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__user\"\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.stg_greenhouse__user"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__user_email_email__user_id.5807b23dc7": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["email", "user_id"], "model": "{{ get_where_subquery(ref('stg_greenhouse__user_email')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__user_email"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_76404d1264d259eb872f895c7039ffbb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__user_email_email__user_id"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__user_email_email__user_id.5807b23dc7", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_76404d1264d259eb872f895c7039ffbb\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_76404d1264d259eb872f895c7039ffbb.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__user_email_email__user_id", "alias": "dbt_utils_unique_combination_o_76404d1264d259eb872f895c7039ffbb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__user_email"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_76404d1264d259eb872f895c7039ffbb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_76404d1264d259eb872f895c7039ffbb"}, "created_at": 1671121118.606185, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, user_id\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__user_email\"\n    group by email, user_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__user_email"}, "test.greenhouse_source.unique_stg_greenhouse__prospect_pool_prospect_pool_id.fa31f2af50": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "prospect_pool_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__prospect_pool')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__prospect_pool"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "unique_stg_greenhouse__prospect_pool_prospect_pool_id"], "unique_id": "test.greenhouse_source.unique_stg_greenhouse__prospect_pool_prospect_pool_id.fa31f2af50", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "unique_stg_greenhouse__prospect_pool_prospect_pool_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "unique_stg_greenhouse__prospect_pool_prospect_pool_id", "alias": "unique_stg_greenhouse__prospect_pool_prospect_pool_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__prospect_pool"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/unique_stg_greenhouse__prospect_pool_prospect_pool_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.609587, "compiled_code": "\n    \n    \n\nselect\n    prospect_pool_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__prospect_pool\"\nwhere prospect_pool_id is not null\ngroup by prospect_pool_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "prospect_pool_id", "file_key_name": "models.stg_greenhouse__prospect_pool"}, "test.greenhouse_source.not_null_stg_greenhouse__prospect_pool_prospect_pool_id.293ef56820": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "prospect_pool_id", "model": "{{ get_where_subquery(ref('stg_greenhouse__prospect_pool')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__prospect_pool"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "not_null_stg_greenhouse__prospect_pool_prospect_pool_id"], "unique_id": "test.greenhouse_source.not_null_stg_greenhouse__prospect_pool_prospect_pool_id.293ef56820", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "not_null_stg_greenhouse__prospect_pool_prospect_pool_id.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "not_null_stg_greenhouse__prospect_pool_prospect_pool_id", "alias": "not_null_stg_greenhouse__prospect_pool_prospect_pool_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__prospect_pool"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/not_null_stg_greenhouse__prospect_pool_prospect_pool_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671121118.6105611, "compiled_code": "\n    \n    \n\n\n\nselect prospect_pool_id\nfrom \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__prospect_pool\"\nwhere prospect_pool_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "prospect_pool_id", "file_key_name": "models.stg_greenhouse__prospect_pool"}, "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__prospect_stage_prospect_pool_id__prospect_stage_id.20ef21c4bb": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["prospect_pool_id", "prospect_stage_id"], "model": "{{ get_where_subquery(ref('stg_greenhouse__prospect_stage')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.greenhouse_source.stg_greenhouse__prospect_stage"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_948180b682acbb3dbe0911f67a1e8473", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "greenhouse_source_integration_tests_dbt_test__audit", "fqn": ["greenhouse_source", "dbt_utils_unique_combination_of_columns_stg_greenhouse__prospect_stage_prospect_pool_id__prospect_stage_id"], "unique_id": "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__prospect_stage_prospect_pool_id__prospect_stage_id.20ef21c4bb", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_948180b682acbb3dbe0911f67a1e8473\") }}", "language": "sql", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "dbt_utils_unique_combination_o_948180b682acbb3dbe0911f67a1e8473.sql", "original_file_path": "models/stg_greenhouse.yml", "name": "dbt_utils_unique_combination_of_columns_stg_greenhouse__prospect_stage_prospect_pool_id__prospect_stage_id", "alias": "dbt_utils_unique_combination_o_948180b682acbb3dbe0911f67a1e8473", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_greenhouse__prospect_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/greenhouse_source/models/stg_greenhouse.yml/dbt_utils_unique_combination_o_948180b682acbb3dbe0911f67a1e8473.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_948180b682acbb3dbe0911f67a1e8473"}, "created_at": 1671121118.611541, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        prospect_pool_id, prospect_stage_id\n    from \"postgres\".\"greenhouse_source_integration_tests_stg_greenhouse\".\"stg_greenhouse__prospect_stage\"\n    group by prospect_pool_id, prospect_stage_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_greenhouse__prospect_stage"}}, "sources": {"source.greenhouse_source.greenhouse.activity": {"fqn": ["greenhouse_source", "greenhouse", "activity"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.activity", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "activity", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "activity", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing lists of activities on a candidate\u2019s profile, including interviews, notes, and emails.", "columns": {"body": {"name": "body", "description": "Content of the activity taken.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE whose profile was acted upon.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the activity occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The internal Greenhouse ID of the activity feed note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "Subject of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the USER who performed the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"activity\"", "created_at": 1671121118.660629}, "source.greenhouse_source.greenhouse.application": {"fqn": ["greenhouse_source", "greenhouse", "application"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.application", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "application", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "application", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing all applications (candidates + prospects).", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the application has been soft-deleted from Greenhouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "applied_at": {"name": "applied_at", "description": "Timestamp of when the application was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE who submitted the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credited_to_user_id": {"name": "credited_to_user_id", "description": "Foreign key referencing the USER who will receive credit for this application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_stage_id": {"name": "current_stage_id", "description": "Foreign key referencing the JOB_STAGE that the application is currently at in the pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_activity_at": {"name": "last_activity_at", "description": "Timestamp of when the last activity was taken on this application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_address": {"name": "location_address", "description": "The content of the address question on a job post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect": {"name": "prospect", "description": "Boolean that is true if this is a prospect application, which means that the associated person  is a prospect and has not yet applied for this job.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_owner_id": {"name": "prospect_owner_id", "description": "Foreign key referencing the USER ID of the prospect owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_pool_id": {"name": "prospect_pool_id", "description": "Foreign key referencing the PROSPECT_POOL that the application came from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_stage_id": {"name": "prospect_stage_id", "description": "Foreign key referencing the ID of the application's PROSPECT_POOL_STAGE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rejected_at": {"name": "rejected_at", "description": "Timestamp of when the application was rejected.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rejected_reason_id": {"name": "rejected_reason_id", "description": "Foreign key referencing the REJECTION_REASON for the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "Foreign key referencing the ID of the SOURCE of the application.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "One of - active, rejected, hired.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"application\"", "created_at": 1671121118.66077}, "source.greenhouse_source.greenhouse.application_history": {"fqn": ["greenhouse_source", "greenhouse", "application_history"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.application_history", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "application_history", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "application_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing the history of applications as they advance through job stages.", "columns": {"application_id": {"name": "application_id", "description": "Foreign key referencing the APPLICATION that was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_stage_id": {"name": "new_stage_id", "description": "Foreign key referencing the JOB_STAGE that the application was advanced to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_status": {"name": "new_status", "description": "Status of the application as of this updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the application was advanced.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": true}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"application_history\"", "created_at": 1671121118.660852}, "source.greenhouse_source.greenhouse.attachment": {"fqn": ["greenhouse_source", "greenhouse", "attachment"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.attachment", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "attachment", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "attachment", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing files attached to the candidate profile.", "columns": {"candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE who uploaded the attachment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "filename": {"name": "filename", "description": "Name of the file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index of the file upload amongst this candidate's attachments.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "One of [\u201cresume\u201d, \u201ccover_letter\u201d, \u201cadmin_only\u201d]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "Url of where the attachment is stored.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"attachment\"", "created_at": 1671121118.660922}, "source.greenhouse_source.greenhouse.candidate": {"fqn": ["greenhouse_source", "greenhouse", "candidate"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.candidate", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "candidate", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "candidate", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing an organization's candidates.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the candidate is soft-deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "The company at which the candidate currently works.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coordinator_id": {"name": "coordinator_id", "description": "Foreign key referencing the USER who is responsible for coordinating this candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the candidate profile was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the candidate in Greenhouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_private": {"name": "is_private", "description": "Boolean that is true if the candidate is private.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_activity": {"name": "last_activity", "description": "Timestamp of when the last activity was performed on this candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Candidate's last name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_candidate_id": {"name": "new_candidate_id", "description": "Self-referencing ID of the candidate's new candidate ID (ie they were a prospect and converted). Only deleted\n candidates should have a non-null new_candidate_id.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "photo_url": {"name": "photo_url", "description": "This field has been removed from Greenhouse and will always be null.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recruiter_id": {"name": "recruiter_id", "description": "Foreign key referencing the USER who is the recruiter assigned to this candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The candidate's current title.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the candidate profile was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"candidate\"", "created_at": 1671121118.660994}, "source.greenhouse_source.greenhouse.candidate_tag": {"fqn": ["greenhouse_source", "greenhouse", "candidate_tag"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.candidate_tag", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "candidate_tag", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "candidate_tag", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table associating candidate's with their attached tags.", "columns": {"candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE who is tagged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tag_id": {"name": "tag_id", "description": "Foreign key referencing the TAG attached to this candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"candidate_tag\"", "created_at": 1671121118.661053}, "source.greenhouse_source.greenhouse.department": {"fqn": ["greenhouse_source", "greenhouse", "department"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.department", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "department", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "department", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table storing an organization's job departments.", "columns": {"external_id": {"name": "external_id", "description": "An arbitrary ID provided by an external source; does not map to another entity in Greenhouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The department\u2019s name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Self-referencing parent department ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": true}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"department\"", "created_at": 1671121118.661115}, "source.greenhouse_source.greenhouse.eeoc": {"fqn": ["greenhouse_source", "greenhouse", "eeoc"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.eeoc", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "eeoc", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "eeoc", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing EEOC data provided by candidates.", "columns": {"application_id": {"name": "application_id", "description": "Foreign key referencing the ID of the application with this EEOC data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disability_status_description": {"name": "disability_status_description", "description": "Description of the applicant's disability status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disability_status_id": {"name": "disability_status_id", "description": "Foreign key referencing the status' DEMOGRAPHIC_ANSWER_OPTION ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender_description": {"name": "gender_description", "description": "Description of the applicant's gender identity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender_id": {"name": "gender_id", "description": "Foreign key referencing the gender identity's DEMOGRAPHIC_ANSWER_OPTION ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race_description": {"name": "race_description", "description": "Description of applicant's provided race.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race_id": {"name": "race_id", "description": "Foreign key referencing the racial identity's DEMOGRAPHIC_ANSWER_OPTION ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submitted_at": {"name": "submitted_at", "description": "Timestamp of when the EEOC data was submitted by the applicant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "veteran_status_description": {"name": "veteran_status_description", "description": "Description of the applicant's veteran status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "veteran_status_id": {"name": "veteran_status_id", "description": "Foreign key referencing the veteran status' DEMOGRAPHIC_ANSWER_OPTION ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": true}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"eeoc\"", "created_at": 1671121118.66118}, "source.greenhouse_source.greenhouse.email_address": {"fqn": ["greenhouse_source", "greenhouse", "email_address"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.email_address", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "email_address", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "email_address", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table storing email addresses associated with candidates.", "columns": {"candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE whose email this is.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index of this individual email among all emails associated with this candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of email address - work, other, personal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The candidate's email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"email_address\"", "created_at": 1671121118.661238}, "source.greenhouse_source.greenhouse.hiring_team": {"fqn": ["greenhouse_source", "greenhouse", "hiring_team"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.hiring_team", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "hiring_team", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "hiring_team", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing users and their roles on job hiring teams.", "columns": {"job_id": {"name": "job_id", "description": "Foreign key referencing the JOB that this team of users is hiring for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "One of - hiring managers, recruiters, coordinators, sourcers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the USER who has this role.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"hiring_team\"", "created_at": 1671121118.6612961}, "source.greenhouse_source.greenhouse.interview": {"fqn": ["greenhouse_source", "greenhouse", "interview"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.interview", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "interview", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "interview", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing the **generic** interview steps associated with each stage of a job. This differs  from SCHEDULED_INTERVIEW, which represents these interviews administered to individual candidates.\n", "columns": {"id": {"name": "id", "description": "Unique ID of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_kit_content": {"name": "interview_kit_content", "description": "Details about the interview, including unique ID, interview prep content, and custom interview questions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_stage_id": {"name": "job_stage_id", "description": "Foreign key referencing the JOB_STAGE that this interview is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Title of this interview step.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"interview\"", "created_at": 1671121118.661355}, "source.greenhouse_source.greenhouse.job": {"fqn": ["greenhouse_source", "greenhouse", "job"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.job", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "job", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "job", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing all jobs stored in Greenhouse.", "columns": {"closed_at": {"name": "closed_at", "description": "Timestamp of when the last opening for this job closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "confidential": {"name": "confidential", "description": "Boolean that is true if the job is confidential.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the job was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Title of the job role.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Notes on the hiring plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requisition_id": {"name": "requisition_id", "description": "The id of the requisition corresponding to this job posting, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "One of open, closed, draft.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the job was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job\"", "created_at": 1671121118.661417}, "source.greenhouse_source.greenhouse.job_application": {"fqn": ["greenhouse_source", "greenhouse", "job_application"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.job_application", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "job_application", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "job_application", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table relating applications to the jobs they applied to.", "columns": {"application_id": {"name": "application_id", "description": "Foreign key referencing the APPLICATION that was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Foreign key referencing the JOB that was applied to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job_application\"", "created_at": 1671121118.661472}, "source.greenhouse_source.greenhouse.job_department": {"fqn": ["greenhouse_source", "greenhouse", "job_department"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.job_department", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "job_department", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "job_department", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table relating jobs to the departments they exist in.", "columns": {"department_id": {"name": "department_id", "description": "Foreign key referencing the DEPARTMENT associated with this job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Foreign key referencing the JOB.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": true}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job_department\"", "created_at": 1671121118.661531}, "source.greenhouse_source.greenhouse.job_office": {"fqn": ["greenhouse_source", "greenhouse", "job_office"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.job_office", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "job_office", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "job_office", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table relating jobs to the offices they exist in.", "columns": {"office_id": {"name": "office_id", "description": "Foreign key referencing the OFFICE associated with this job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Foreign key referencing the JOB.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": true}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job_office\"", "created_at": 1671121118.661589}, "source.greenhouse_source.greenhouse.job_opening": {"fqn": ["greenhouse_source", "greenhouse", "job_opening"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.job_opening", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "job_opening", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "job_opening", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing openings made for jobs.", "columns": {"application_id": {"name": "application_id", "description": "Foreign key referencing the APPLICATION that was used to fill this opening.  This should only be set on a closed opening, null otherwise.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "close_reason_id": {"name": "close_reason_id", "description": "Foreign key referencing the CLOSE_REASON for this opening.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "Timestamp of when this opening was closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the job opening.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Foreign key referencing the id of the JOB that this opening exists for.  A job can have multiple openings.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opened_at": {"name": "opened_at", "description": "Timestamp of when the job was opened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opening_id": {"name": "opening_id", "description": "Opening ID visible from the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Either \u201copen\u201d or \u201cclosed\u201d.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job_opening\"", "created_at": 1671121118.6616518}, "source.greenhouse_source.greenhouse.job_post": {"fqn": ["greenhouse_source", "greenhouse", "job_post"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.job_post", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "job_post", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "job_post", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing the online job posts for an organization\u2019s jobs (as seen on the Job Board).", "columns": {"content": {"name": "content", "description": "The text of the job post as posted to the external job board.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the job post was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external": {"name": "external", "description": "If true, this job post has been posted (or is to be posted) on an external job board.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the job post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "internal": {"name": "internal", "description": "If true, this job post has been posted (or is to be posted) on an internal job board.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "internal_content": {"name": "internal_content", "description": "The text of the job post if posted to the internal job board, if different than the external job board.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Foreign key referencing the JOB this post is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "live": {"name": "live", "description": "If true, this job post status is set to live.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_name": {"name": "location_name", "description": "Name of the location for this job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Title of the job post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the job post was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job_post\"", "created_at": 1671121118.661719}, "source.greenhouse_source.greenhouse.job_stage": {"fqn": ["greenhouse_source", "greenhouse", "job_stage"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.job_stage", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "job_stage", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "job_stage", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing each stage of a job's hiring pipeline.", "columns": {"created_at": {"name": "created_at", "description": "Timestamp of when the job stage was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the job stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "Foreign key referencing the JOB for which the stage exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the job stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the job stage was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"job_stage\"", "created_at": 1671121118.661779}, "source.greenhouse_source.greenhouse.office": {"fqn": ["greenhouse_source", "greenhouse", "office"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.office", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "office", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "office", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing an organization's offices.", "columns": {"external_id": {"name": "external_id", "description": "An arbitrary ID provided by an external source; does not map to another entity in Greenhouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the office.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_name": {"name": "location_name", "description": "The office's location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The office\u2019s name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Self-referencing id of the office's parent office.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_contact_user_id": {"name": "primary_contact_user_id", "description": "Foreign key referencing the id of the USER who will be the primary in-house contact for  this office. This user must be a site-admin.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": true}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"office\"", "created_at": 1671121118.6618419}, "source.greenhouse_source.greenhouse.phone_number": {"fqn": ["greenhouse_source", "greenhouse", "phone_number"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.phone_number", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "phone_number", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "phone_number", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing phone numbers associated with candidates.", "columns": {"candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE with this phone.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index of the phone number amongst phone numbers associated with this candidate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of phone.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "Candidate's phone number.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"phone_number\"", "created_at": 1671121118.661901}, "source.greenhouse_source.greenhouse.scheduled_interview": {"fqn": ["greenhouse_source", "greenhouse", "scheduled_interview"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.scheduled_interview", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "scheduled_interview", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "scheduled_interview", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table storing interviews that have been scheduled for the specified application.", "columns": {"application_id": {"name": "application_id", "description": "Foreign key referencing the APPLICATION that is being interviewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the interview was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end": {"name": "end", "description": "Timestamp of when the interview is scheduled to end. Will be a date if the interview is all-day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the scheduled interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview_id": {"name": "interview_id", "description": "Foreign key referencing the id of the generic INTERVIEW step that this scheduled interview maps to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "The location of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizer_id": {"name": "organizer_id", "description": "Foreign key referencing the USER who organized the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start": {"name": "start", "description": "Timestamp of when the interview is scheduled to start. Will be a date if the interview is all-day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "One of - scheduled, awaiting_feedback, complete.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the interview was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"scheduled_interview\"", "created_at": 1671121118.661966}, "source.greenhouse_source.greenhouse.scheduled_interviewer": {"fqn": ["greenhouse_source", "greenhouse", "scheduled_interviewer"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.scheduled_interviewer", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "scheduled_interviewer", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "scheduled_interviewer", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table storing relating users to interviews they partook in.", "columns": {"interviewer_id": {"name": "interviewer_id", "description": "Foreign key referencing the USER conducting the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scheduled_interview_id": {"name": "scheduled_interview_id", "description": "Foreign key referencing the specific candidate's SCHEDULED_INTERVIEW id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scorecard_id": {"name": "scorecard_id", "description": "Foreign key referencing the SCORECARD associated with this interviewer's feedback.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"scheduled_interviewer\"", "created_at": 1671121118.662064}, "source.greenhouse_source.greenhouse.scorecard": {"fqn": ["greenhouse_source", "greenhouse", "scorecard"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.scorecard", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "scorecard", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "scorecard", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "All submitted scorecards for candidate interviews.", "columns": {"application_id": {"name": "application_id", "description": "Foreign key referencing the APPLICATION for which the scorecard was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE who was interviewed and scored.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the scorecard was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the scorecard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interview": {"name": "interview", "description": "Title of the interview.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interviewed_at": {"name": "interviewed_at", "description": "Timestamp of when the interview begun.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overall_recommendation": {"name": "overall_recommendation", "description": "One of - definitely_not, no, yes, strong_yes, no_decision.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submitted_at": {"name": "submitted_at", "description": "Timestamp of when the scorecard was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submitted_by_user_id": {"name": "submitted_by_user_id", "description": "Foreign key referencing the USER who submitted the scorecard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the scorecard was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"scorecard\"", "created_at": 1671121118.662133}, "source.greenhouse_source.greenhouse.scorecard_attribute": {"fqn": ["greenhouse_source", "greenhouse", "scorecard_attribute"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.scorecard_attribute", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "scorecard_attribute", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "scorecard_attribute", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing ratings along individual standards within each scorecard.", "columns": {"index": {"name": "index", "description": "Index of this rating/standard amongst the attributes of this scorecard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the scorecard attribute.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "Additional from the interviewer regarding the attribute score.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rating": {"name": "rating", "description": "Rating given to the candidate along this individual scorecard attribute.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scorecard_id": {"name": "scorecard_id", "description": "Foreign key referencing the SCORECARD this attribute rating belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Category of the attribute.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"scorecard_attribute\"", "created_at": 1671121118.662199}, "source.greenhouse_source.greenhouse.social_media_address": {"fqn": ["greenhouse_source", "greenhouse", "social_media_address"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.social_media_address", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "social_media_address", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "social_media_address", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing social media links (ie linkedin, github) provided by candidates.", "columns": {"candidate_id": {"name": "candidate_id", "description": "Foreign key referencing the CANDIDATE associated with these links.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index of the social media link amongst the candidate's stored links.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The candidate's social media link.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"social_media_address\"", "created_at": 1671121118.662257}, "source.greenhouse_source.greenhouse.source": {"fqn": ["greenhouse_source", "greenhouse", "source"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.source", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "source", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "source", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing an organization's applicant sources.", "columns": {"id": {"name": "id", "description": "Unique ID of the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_type_id": {"name": "source_type_id", "description": "ID of the category of source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_type_name": {"name": "source_type_name", "description": "Name of the source category. One of - attend_events, referrals, third_party_boards,  candidate_search, other, social_media, company_marketing, agencies, prospecting.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"source\"", "created_at": 1671121118.662317}, "source.greenhouse_source.greenhouse.tag": {"fqn": ["greenhouse_source", "greenhouse", "tag"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.tag", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "tag", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "tag", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table storing candidate tags.", "columns": {"id": {"name": "id", "description": "Unique ID of the tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Title of the tag as it appears in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"tag\"", "created_at": 1671121118.662376}, "source.greenhouse_source.greenhouse.user": {"fqn": ["greenhouse_source", "greenhouse", "user"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.user", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "user", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "user", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of an organization's Greenhouse users.", "columns": {"created_at": {"name": "created_at", "description": "Timestamp of when the user was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disabled": {"name": "disabled", "description": "Boolean that is true if the user account has been disabled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "employee_id": {"name": "employee_id", "description": "The user\u2019s external employee id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "User's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "User's last name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "site_admin": {"name": "site_admin", "description": "If true, this user is a site admin, which means the user has full permissions on all non-private jobs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the user was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"user\"", "created_at": 1671121118.662442}, "source.greenhouse_source.greenhouse.user_email": {"fqn": ["greenhouse_source", "greenhouse", "user_email"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.user_email", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "user_email", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "user_email", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table associating Greenhouse users with their emails.", "columns": {"email": {"name": "email", "description": "User's email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the USER who has this email.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"user_email\"", "created_at": 1671121118.6625001}, "source.greenhouse_source.greenhouse.prospect_pool": {"fqn": ["greenhouse_source", "greenhouse", "prospect_pool"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.prospect_pool", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "prospect_pool", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "prospect_pool", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing prospect pool groups.", "columns": {"active": {"name": "active", "description": "Boolean that is false if the pool is hidden from view in Greenhouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the prospect pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name given to the prospect pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": true}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"prospect_pool\"", "created_at": 1671121118.6625721}, "source.greenhouse_source.greenhouse.prospect_stage": {"fqn": ["greenhouse_source", "greenhouse", "prospect_stage"], "database": "postgres", "schema": "greenhouse_source_integration_tests", "unique_id": "source.greenhouse_source.greenhouse.prospect_stage", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "models/src_greenhouse.yml", "original_file_path": "models/src_greenhouse.yml", "name": "prospect_stage", "source_name": "greenhouse", "source_description": "", "loader": "fivetran", "identifier": "prospect_stage", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing stages prospects in different pools advance through.", "columns": {"id": {"name": "id", "description": "Unique id of the prospect stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the prospect stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prospect_pool_id": {"name": "prospect_pool_id", "description": "Foreign key referencing the PROSPECT_POOL the stage belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": true}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"greenhouse_source_integration_tests\".\"prospect_stage\"", "created_at": 1671121118.662632}}, "macros": {"macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.472298, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4725199, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4726348, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4727418, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.472849, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.473981, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.474667, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4802392, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.480744, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.481083, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4814131, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.481909, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.482292, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4824681, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.482823, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.48333, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.484212, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.484425, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4847622, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4851148, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.485657, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4858902, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.48649, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4866939, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"unique_id": "macro.dbt_postgres.postgres__copy_grants", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.486808, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "name": "postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.487381, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.488152, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"unique_id": "macro.dbt_postgres.postgres__dateadd", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4884522, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"unique_id": "macro.dbt_postgres.postgres__listagg", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.489286, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"unique_id": "macro.dbt_postgres.postgres__datediff", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.492778, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"unique_id": "macro.dbt_postgres.postgres__any_value", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.49311, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"unique_id": "macro.dbt_postgres.postgres__last_day", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.493723, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"unique_id": "macro.dbt_postgres.postgres__split_part", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4942431, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.495417, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.495626, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.495768, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.495905, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.496041, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4964979, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.496799, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.497101, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.497612, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.4978838, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.50135, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.50152, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.501739, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.502444, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5026062, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5027761, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.504135, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.50548, "supported_languages": null}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5092869, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.509566, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.50973, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.509814, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5099578, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.510072, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.510272, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.511153, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.511351, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.51161, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5120609, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.518122, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.520236, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.520779, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.521079, "supported_languages": null}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.521525, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5219011, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5234501, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.524014, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.524697, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5249338, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.525663, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5299578, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.531615, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5318642, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.532613, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5328808, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.53353, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.534251, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.53515, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.535389, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.535578, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.535844, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.536034, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5363011, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5365, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.536766, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5369558, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.537106, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.537389, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.542298, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5473862, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.548664, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.549844, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.550693, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.553289, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.553886, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5540748, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.554511, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5549262, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.557504, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.557885, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5581079, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.559646, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5600798, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.560251, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.560431, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.560694, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.564161, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5687811, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5696661, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.569899, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.570364, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.570555, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5706828, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5708191, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5709288, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5710871, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.571201, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.571661, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.571841, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.573372, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.573982, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.574223, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.574811, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.575076, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.575365, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.575826, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.576093, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.576513, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5768802, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5771909, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.577877, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.579434, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.580089, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5803862, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.582185, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.583383, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.584141, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.584377, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5846999, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.584779, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.585181, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5853498, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5856798, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.585811, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.586137, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5862458, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5866492, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.586814, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.587109, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.587183, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5875158, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5876632, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.588026, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.588237, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5889149, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.589323, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.589741, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5899122, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5904572, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5906198, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.591031, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.591208, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.591564, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5917382, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.592074, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.592188, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5925639, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5927098, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.593038, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.593148, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.594113, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.594261, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5945, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.594649, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.59481, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.594955, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.595111, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.595285, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.595445, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.595593, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5957491, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5958898, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5960488, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.596191, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.596554, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.596683, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.597004, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.597107, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5975108, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.597776, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5979211, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.598486, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.598648, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.599118, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.5994618, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.599586, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.600018, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6004689, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.600963, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.601113, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6016011, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6018019, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.601975, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6021671, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.602732, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.602895, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6030378, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.603149, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6033258, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.603404, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.603585, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.603764, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.604278, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.604507, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6046789, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.605091, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.608125, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.60829, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.608503, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.608789, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6090271, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.609354, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.609535, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6097438, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.609932, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.610097, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.610303, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.610587, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6108422, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6114151, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.611723, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6118631, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.612055, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.612541, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.612944, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.614558, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.614679, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.614843, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.614954, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.615304, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.61549, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6155899, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.615811, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.615996, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6162372, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.616429, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.616648, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.617332, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.617603, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.617931, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.618187, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.619325, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.620102, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6202722, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.620471, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.620634, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6209128, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6213849, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6228101, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.623073, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.623261, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.623413, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.623588, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6238332, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.624043, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.624338, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6245272, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.624681, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.626327, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.626552, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.626872, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.627063, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6274, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.627626, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.628211, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.628462, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6292741, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6307788, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6312692, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.631867, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.632309, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.632393, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.633059, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.633294, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.633587, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.633866, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.634315, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6348002, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.635335, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.636097, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.636488, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.63681, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.637882, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6388748, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.640008, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.641215, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.642061, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.642415, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6432278, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6441028, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.644662, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.645149, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.645844, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6463318, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.646963, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.64736, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.647914, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6485739, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6494641, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.650187, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.650881, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.651235, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.651733, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.652102, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.652809, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.653653, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.654607, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6555321, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.656349, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6572502, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"unique_id": "macro.dbt_utils.test_not_empty_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "name": "test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6578171, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"unique_id": "macro.dbt_utils.default__test_not_empty_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "name": "default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6581151, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6618571, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.663529, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6639202, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.664098, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.664649, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.665012, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6652129, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6655412, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.66572, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.666419, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6673338, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.668086, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.66869, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.668929, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.669296, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.669683, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.670034, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.67078, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.671725, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6726148, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.673072, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.673268, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.673791, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.674549, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.675405, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6758761, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.676168, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.677388, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.678773, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.680105, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.681776, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"unique_id": "macro.dbt_utils.safe_divide", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "name": "safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.682165, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"unique_id": "macro.dbt_utils.default__safe_divide", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "name": "default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.682301, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6853702, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.688846, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.689234, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.689476, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.690249, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.690457, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.690651, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.690845, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6910112, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.691187, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.691651, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.691895, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6923578, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.692891, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.693295, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.693634, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.695277, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.695643, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.6964521, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.696961, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.698112, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.699617, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.700734, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.701592, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7021272, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.702854, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.704299, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.704764, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.705229, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.705415, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.705873, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.706479, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"unique_id": "macro.dbt_utils.generate_surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "name": "generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7070122, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"unique_id": "macro.dbt_utils.default__generate_surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "name": "default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.707679, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7081358, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.708277, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.708416, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"unique_id": "macro.dbt_utils.get_single_value", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "name": "get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.708982, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"unique_id": "macro.dbt_utils.default__get_single_value", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "name": "default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.71005, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.711149, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.711431, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.711997, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.712811, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7132869, "supported_languages": null}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7142599, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.714431, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"unique_id": "macro.fivetran_utils.redshift__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.714595, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.714756, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"unique_id": "macro.fivetran_utils.postgres__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.714905, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"unique_id": "macro.fivetran_utils.spark__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.715065, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.715938, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"unique_id": "macro.fivetran_utils.persist_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "name": "persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.716672, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7177558, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.718011, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"unique_id": "macro.fivetran_utils.redshift__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.718261, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.718496, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.718806, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.719063, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.719321, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.719698, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7198, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.719896, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.719996, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"unique_id": "macro.fivetran_utils.calculated_fields", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "name": "calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.720437, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7210891, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.721944, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.722477, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.722611, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.722741, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.722872, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"unique_id": "macro.fivetran_utils.spark__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.72301, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.725805, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.725976, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.726138, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.726298, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.728093, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"unique_id": "macro.fivetran_utils.try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.728998, "supported_languages": null}, "macro.fivetran_utils.default__safe_cast": {"unique_id": "macro.fivetran_utils.default__safe_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.729147, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"unique_id": "macro.fivetran_utils.redshift__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7294762, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"unique_id": "macro.fivetran_utils.postgres__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.729781, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"unique_id": "macro.fivetran_utils.snowflake__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.729923, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"unique_id": "macro.fivetran_utils.bigquery__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7300491, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"unique_id": "macro.fivetran_utils.spark__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.730172, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.730748, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.731333, "supported_languages": null}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.73191, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.732121, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.732352, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"unique_id": "macro.fivetran_utils.add_dbt_source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "name": "add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.732692, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7338629, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.737866, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7382321, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.738697, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.740303, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.740851, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7414882, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7416499, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"unique_id": "macro.fivetran_utils.snowflake__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7418098, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"unique_id": "macro.fivetran_utils.redshift__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.741981, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7421381, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7422879, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.74305, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7440362, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.744792, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.74496, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.745118, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.745285, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.745444, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7456179, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7459478, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.746055, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.746229, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.746934, "supported_languages": null}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7483299, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n    {% set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.750745, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7522402, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.752589, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7526941, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.752799, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.75328, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.753751, "supported_languages": null}, "macro.greenhouse_source.get_job_post_columns": {"unique_id": "macro.greenhouse_source.get_job_post_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_job_post_columns.sql", "original_file_path": "macros/get_job_post_columns.sql", "name": "get_job_post_columns", "macro_sql": "{% macro get_job_post_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"content\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"external\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"internal\", \"datatype\": \"boolean\"},\n    {\"name\": \"internal_content\", \"datatype\": dbt.type_string()},\n    {\"name\": \"job_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"live\", \"datatype\": \"boolean\"},\n    {\"name\": \"location_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7552378, "supported_languages": null}, "macro.greenhouse_source.get_interview_columns": {"unique_id": "macro.greenhouse_source.get_interview_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_interview_columns.sql", "original_file_path": "macros/get_interview_columns.sql", "name": "get_interview_columns", "macro_sql": "{% macro get_interview_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"interview_kit_content\", \"datatype\": dbt.type_string()},\n    {\"name\": \"job_stage_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.756001, "supported_languages": null}, "macro.greenhouse_source.get_job_department_columns": {"unique_id": "macro.greenhouse_source.get_job_department_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_job_department_columns.sql", "original_file_path": "macros/get_job_department_columns.sql", "name": "get_job_department_columns", "macro_sql": "{% macro get_job_department_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"job_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.756563, "supported_languages": null}, "macro.greenhouse_source.get_email_address_columns": {"unique_id": "macro.greenhouse_source.get_email_address_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_email_address_columns.sql", "original_file_path": "macros/get_email_address_columns.sql", "name": "get_email_address_columns", "macro_sql": "{% macro get_email_address_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"candidate_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.757321, "supported_languages": null}, "macro.greenhouse_source.get_job_application_columns": {"unique_id": "macro.greenhouse_source.get_job_application_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_job_application_columns.sql", "original_file_path": "macros/get_job_application_columns.sql", "name": "get_job_application_columns", "macro_sql": "{% macro get_job_application_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"application_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"job_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.757865, "supported_languages": null}, "macro.greenhouse_source.get_attachment_columns": {"unique_id": "macro.greenhouse_source.get_attachment_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_attachment_columns.sql", "original_file_path": "macros/get_attachment_columns.sql", "name": "get_attachment_columns", "macro_sql": "{% macro get_attachment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"candidate_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"filename\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.758681, "supported_languages": null}, "macro.greenhouse_source.get_scorecard_attribute_columns": {"unique_id": "macro.greenhouse_source.get_scorecard_attribute_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_scorecard_attribute_columns.sql", "original_file_path": "macros/get_scorecard_attribute_columns.sql", "name": "get_scorecard_attribute_columns", "macro_sql": "{% macro get_scorecard_attribute_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rating\", \"datatype\": dbt.type_string()},\n    {\"name\": \"scorecard_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7596018, "supported_languages": null}, "macro.greenhouse_source.get_prospect_stage_columns": {"unique_id": "macro.greenhouse_source.get_prospect_stage_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_prospect_stage_columns.sql", "original_file_path": "macros/get_prospect_stage_columns.sql", "name": "get_prospect_stage_columns", "macro_sql": "{% macro get_prospect_stage_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prospect_pool_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.760301, "supported_languages": null}, "macro.greenhouse_source.get_job_stage_columns": {"unique_id": "macro.greenhouse_source.get_job_stage_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_job_stage_columns.sql", "original_file_path": "macros/get_job_stage_columns.sql", "name": "get_job_stage_columns", "macro_sql": "{% macro get_job_stage_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"job_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.761197, "supported_languages": null}, "macro.greenhouse_source.get_phone_number_columns": {"unique_id": "macro.greenhouse_source.get_phone_number_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_phone_number_columns.sql", "original_file_path": "macros/get_phone_number_columns.sql", "name": "get_phone_number_columns", "macro_sql": "{% macro get_phone_number_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"candidate_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.761933, "supported_languages": null}, "macro.greenhouse_source.get_scheduled_interviewer_columns": {"unique_id": "macro.greenhouse_source.get_scheduled_interviewer_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_scheduled_interviewer_columns.sql", "original_file_path": "macros/get_scheduled_interviewer_columns.sql", "name": "get_scheduled_interviewer_columns", "macro_sql": "{% macro get_scheduled_interviewer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"interviewer_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"scheduled_interview_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"scorecard_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.762583, "supported_languages": null}, "macro.greenhouse_source.get_candidate_tag_columns": {"unique_id": "macro.greenhouse_source.get_candidate_tag_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_candidate_tag_columns.sql", "original_file_path": "macros/get_candidate_tag_columns.sql", "name": "get_candidate_tag_columns", "macro_sql": "{% macro get_candidate_tag_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"candidate_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"tag_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.763221, "supported_languages": null}, "macro.greenhouse_source.get_hiring_team_columns": {"unique_id": "macro.greenhouse_source.get_hiring_team_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_hiring_team_columns.sql", "original_file_path": "macros/get_hiring_team_columns.sql", "name": "get_hiring_team_columns", "macro_sql": "{% macro get_hiring_team_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"job_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"role\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.763871, "supported_languages": null}, "macro.greenhouse_source.get_social_media_address_columns": {"unique_id": "macro.greenhouse_source.get_social_media_address_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_social_media_address_columns.sql", "original_file_path": "macros/get_social_media_address_columns.sql", "name": "get_social_media_address_columns", "macro_sql": "{% macro get_social_media_address_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"candidate_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.764522, "supported_languages": null}, "macro.greenhouse_source.get_scorecard_columns": {"unique_id": "macro.greenhouse_source.get_scorecard_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_scorecard_columns.sql", "original_file_path": "macros/get_scorecard_columns.sql", "name": "get_scorecard_columns", "macro_sql": "{% macro get_scorecard_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"application_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"candidate_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"interview\", \"datatype\": dbt.type_string()},\n    {\"name\": \"interviewed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"overall_recommendation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"submitted_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"submitted_by_user_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7659469, "supported_languages": null}, "macro.greenhouse_source.get_activity_columns": {"unique_id": "macro.greenhouse_source.get_activity_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_activity_columns.sql", "original_file_path": "macros/get_activity_columns.sql", "name": "get_activity_columns", "macro_sql": "{% macro get_activity_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"body\", \"datatype\": dbt.type_string()},\n    {\"name\": \"candidate_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subject\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7668748, "supported_languages": null}, "macro.greenhouse_source.get_user_columns": {"unique_id": "macro.greenhouse_source.get_user_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_user_columns.sql", "original_file_path": "macros/get_user_columns.sql", "name": "get_user_columns", "macro_sql": "{% macro get_user_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"disabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"employee_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"site_admin\", \"datatype\": \"boolean\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.76796, "supported_languages": null}, "macro.greenhouse_source.get_department_columns": {"unique_id": "macro.greenhouse_source.get_department_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_department_columns.sql", "original_file_path": "macros/get_department_columns.sql", "name": "get_department_columns", "macro_sql": "{% macro get_department_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"external_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.768775, "supported_languages": null}, "macro.greenhouse_source.get_prospect_pool_columns": {"unique_id": "macro.greenhouse_source.get_prospect_pool_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_prospect_pool_columns.sql", "original_file_path": "macros/get_prospect_pool_columns.sql", "name": "get_prospect_pool_columns", "macro_sql": "{% macro get_prospect_pool_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.769492, "supported_languages": null}, "macro.greenhouse_source.get_eeoc_columns": {"unique_id": "macro.greenhouse_source.get_eeoc_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_eeoc_columns.sql", "original_file_path": "macros/get_eeoc_columns.sql", "name": "get_eeoc_columns", "macro_sql": "{% macro get_eeoc_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"application_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"disability_status_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"disability_status_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"gender_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gender_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"race_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"race_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"submitted_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"veteran_status_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"veteran_status_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7708201, "supported_languages": null}, "macro.greenhouse_source.get_scheduled_interview_columns": {"unique_id": "macro.greenhouse_source.get_scheduled_interview_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_scheduled_interview_columns.sql", "original_file_path": "macros/get_scheduled_interview_columns.sql", "name": "get_scheduled_interview_columns", "macro_sql": "{% macro get_scheduled_interview_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"application_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"interview_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"organizer_id\", \"datatype\": dbt.type_int()},\n    \n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{% if target.type == 'snowflake' %}\n{{ columns.append( {\"name\": \"end\", \"datatype\": dbt.type_timestamp() } ) }}\n{{ columns.append( {\"name\": \"start\", \"datatype\": dbt.type_timestamp(), \"quote\": True } ) }}\n{% else %}\n{{ columns.append( {\"name\": \"end\", \"datatype\": dbt.type_timestamp(), \"quote\": True } ) }}\n{{ columns.append( {\"name\": \"start\", \"datatype\": dbt.type_timestamp() } ) }}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.772764, "supported_languages": null}, "macro.greenhouse_source.get_user_email_columns": {"unique_id": "macro.greenhouse_source.get_user_email_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_user_email_columns.sql", "original_file_path": "macros/get_user_email_columns.sql", "name": "get_user_email_columns", "macro_sql": "{% macro get_user_email_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.773354, "supported_languages": null}, "macro.greenhouse_source.get_job_office_columns": {"unique_id": "macro.greenhouse_source.get_job_office_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_job_office_columns.sql", "original_file_path": "macros/get_job_office_columns.sql", "name": "get_job_office_columns", "macro_sql": "{% macro get_job_office_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"job_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"office_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7738812, "supported_languages": null}, "macro.greenhouse_source.get_application_history_columns": {"unique_id": "macro.greenhouse_source.get_application_history_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_application_history_columns.sql", "original_file_path": "macros/get_application_history_columns.sql", "name": "get_application_history_columns", "macro_sql": "{% macro get_application_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"application_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"new_stage_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"new_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7745988, "supported_languages": null}, "macro.greenhouse_source.get_candidate_columns": {"unique_id": "macro.greenhouse_source.get_candidate_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_candidate_columns.sql", "original_file_path": "macros/get_candidate_columns.sql", "name": "get_candidate_columns", "macro_sql": "{% macro get_candidate_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"company\", \"datatype\": dbt.type_string()},\n    {\"name\": \"coordinator_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"is_private\", \"datatype\": \"boolean\"},\n    {\"name\": \"last_activity\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"new_candidate_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"recruiter_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.776271, "supported_languages": null}, "macro.greenhouse_source.get_application_columns": {"unique_id": "macro.greenhouse_source.get_application_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_application_columns.sql", "original_file_path": "macros/get_application_columns.sql", "name": "get_application_columns", "macro_sql": "{% macro get_application_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"applied_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"candidate_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"credited_to_user_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"current_stage_id\", \"datatype\": dbt.type_int()},\n\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"last_activity_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"location_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prospect\", \"datatype\": \"boolean\"},\n    {\"name\": \"prospect_owner_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"prospect_pool_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"prospect_stage_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"rejected_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"rejected_reason_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.778286, "supported_languages": null}, "macro.greenhouse_source.get_job_opening_columns": {"unique_id": "macro.greenhouse_source.get_job_opening_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_job_opening_columns.sql", "original_file_path": "macros/get_job_opening_columns.sql", "name": "get_job_opening_columns", "macro_sql": "{% macro get_job_opening_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"application_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"close_reason_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"closed_at\", \"datatype\": dbt.type_timestamp()},\n\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"job_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"opened_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"opening_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.779417, "supported_languages": null}, "macro.greenhouse_source.get_tag_columns": {"unique_id": "macro.greenhouse_source.get_tag_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_tag_columns.sql", "original_file_path": "macros/get_tag_columns.sql", "name": "get_tag_columns", "macro_sql": "{% macro get_tag_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.780063, "supported_languages": null}, "macro.greenhouse_source.get_source_columns": {"unique_id": "macro.greenhouse_source.get_source_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_source_columns.sql", "original_file_path": "macros/get_source_columns.sql", "name": "get_source_columns", "macro_sql": "{% macro get_source_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_type_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"source_type_name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7808928, "supported_languages": null}, "macro.greenhouse_source.get_job_columns": {"unique_id": "macro.greenhouse_source.get_job_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_job_columns.sql", "original_file_path": "macros/get_job_columns.sql", "name": "get_job_columns", "macro_sql": "{% macro get_job_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"closed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"confidential\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requisition_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.782191, "supported_languages": null}, "macro.greenhouse_source.get_office_columns": {"unique_id": "macro.greenhouse_source.get_office_columns", "package_name": "greenhouse_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests/dbt_packages/greenhouse_source", "path": "macros/get_office_columns.sql", "original_file_path": "macros/get_office_columns.sql", "name": "get_office_columns", "macro_sql": "{% macro get_office_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"external_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"location_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"primary_contact_user_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671121117.7832088, "supported_languages": null}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"seed.greenhouse_source_integration_tests.scheduled_interview_snowflake": [{"resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "application_id": "bigint", "interview_id": "bigint", "organizer_id": "bigint", "created_at": "timestamp", "end": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "greenhouse_source_integration_tests", "fqn": ["greenhouse_source_integration_tests", "scheduled_interview_snowflake"], "unique_id": "seed.greenhouse_source_integration_tests.scheduled_interview_snowflake", "raw_code": "", "language": "sql", "package_name": "greenhouse_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/greenhouse/dbt_greenhouse_source/integration_tests", "path": "scheduled_interview_snowflake.csv", "original_file_path": "seeds/scheduled_interview_snowflake.csv", "name": "scheduled_interview_snowflake", "alias": "scheduled_interview_snowflake", "checksum": {"name": "sha256", "checksum": "1bdf8b55bfc9ed25ef7a3d44ee0c44d559d4781fee12d46ed8ed96fd232cb59a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "application_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "interview_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "organizer_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_at": "timestamp", "end": "timestamp", "updated_at": "timestamp"}, "enabled": "{{ true if target.type == 'snowflake' else false }}"}, "created_at": 1671121118.0311208, "config_call_dict": {}}]}, "parent_map": {"seed.greenhouse_source_integration_tests.attachment": [], "seed.greenhouse_source_integration_tests.job": [], "seed.greenhouse_source_integration_tests.source": [], "seed.greenhouse_source_integration_tests.eeoc": [], "seed.greenhouse_source_integration_tests.application_history": [], "seed.greenhouse_source_integration_tests.job_post": [], "seed.greenhouse_source_integration_tests.prospect_stage": [], "seed.greenhouse_source_integration_tests.office": [], "seed.greenhouse_source_integration_tests.interview": [], "seed.greenhouse_source_integration_tests.candidate": [], "seed.greenhouse_source_integration_tests.hiring_team": [], "seed.greenhouse_source_integration_tests.job_application": [], "seed.greenhouse_source_integration_tests.social_media_address": [], "seed.greenhouse_source_integration_tests.scheduled_interviewer": [], "seed.greenhouse_source_integration_tests.user_email": [], "seed.greenhouse_source_integration_tests.activity": [], "seed.greenhouse_source_integration_tests.department": [], "seed.greenhouse_source_integration_tests.job_department": [], "seed.greenhouse_source_integration_tests.tag": [], "seed.greenhouse_source_integration_tests.scorecard_attribute": [], "seed.greenhouse_source_integration_tests.phone_number": [], "seed.greenhouse_source_integration_tests.scheduled_interview": [], "seed.greenhouse_source_integration_tests.user": [], "seed.greenhouse_source_integration_tests.prospect_pool": [], "seed.greenhouse_source_integration_tests.job_stage": [], "seed.greenhouse_source_integration_tests.application": [], "seed.greenhouse_source_integration_tests.job_office": [], "seed.greenhouse_source_integration_tests.email_address": [], "seed.greenhouse_source_integration_tests.scorecard": [], "seed.greenhouse_source_integration_tests.candidate_tag": [], "seed.greenhouse_source_integration_tests.job_opening": [], "model.greenhouse_source.stg_greenhouse__user": ["model.greenhouse_source.stg_greenhouse__user_tmp", "model.greenhouse_source.stg_greenhouse__user_tmp"], "model.greenhouse_source.stg_greenhouse__job_office": ["model.greenhouse_source.stg_greenhouse__job_office_tmp", "model.greenhouse_source.stg_greenhouse__job_office_tmp"], "model.greenhouse_source.stg_greenhouse__scorecard_attribute": ["model.greenhouse_source.stg_greenhouse__scorecard_attribute_tmp", "model.greenhouse_source.stg_greenhouse__scorecard_attribute_tmp"], "model.greenhouse_source.stg_greenhouse__scheduled_interview": ["model.greenhouse_source.stg_greenhouse__scheduled_interview_tmp", "model.greenhouse_source.stg_greenhouse__scheduled_interview_tmp"], "model.greenhouse_source.stg_greenhouse__job_post": ["model.greenhouse_source.stg_greenhouse__job_post_tmp", "model.greenhouse_source.stg_greenhouse__job_post_tmp"], "model.greenhouse_source.stg_greenhouse__job_stage": ["model.greenhouse_source.stg_greenhouse__job_stage_tmp", "model.greenhouse_source.stg_greenhouse__job_stage_tmp"], "model.greenhouse_source.stg_greenhouse__social_media_address": ["model.greenhouse_source.stg_greenhouse__social_media_address_tmp", "model.greenhouse_source.stg_greenhouse__social_media_address_tmp"], "model.greenhouse_source.stg_greenhouse__prospect_stage": ["model.greenhouse_source.stg_greenhouse__prospect_stage_tmp", "model.greenhouse_source.stg_greenhouse__prospect_stage_tmp"], "model.greenhouse_source.stg_greenhouse__scorecard": ["model.greenhouse_source.stg_greenhouse__scorecard_tmp", "model.greenhouse_source.stg_greenhouse__scorecard_tmp"], "model.greenhouse_source.stg_greenhouse__tag": ["model.greenhouse_source.stg_greenhouse__tag_tmp", "model.greenhouse_source.stg_greenhouse__tag_tmp"], "model.greenhouse_source.stg_greenhouse__job_application": ["model.greenhouse_source.stg_greenhouse__job_application_tmp", "model.greenhouse_source.stg_greenhouse__job_application_tmp"], "model.greenhouse_source.stg_greenhouse__phone_number": ["model.greenhouse_source.stg_greenhouse__phone_number_tmp", "model.greenhouse_source.stg_greenhouse__phone_number_tmp"], "model.greenhouse_source.stg_greenhouse__activity": ["model.greenhouse_source.stg_greenhouse__activity_tmp", "model.greenhouse_source.stg_greenhouse__activity_tmp"], "model.greenhouse_source.stg_greenhouse__job_opening": ["model.greenhouse_source.stg_greenhouse__job_opening_tmp", "model.greenhouse_source.stg_greenhouse__job_opening_tmp"], "model.greenhouse_source.stg_greenhouse__application": ["model.greenhouse_source.stg_greenhouse__application_tmp", "model.greenhouse_source.stg_greenhouse__application_tmp"], "model.greenhouse_source.stg_greenhouse__candidate": ["model.greenhouse_source.stg_greenhouse__candidate_tmp", "model.greenhouse_source.stg_greenhouse__candidate_tmp"], "model.greenhouse_source.stg_greenhouse__job_department": ["model.greenhouse_source.stg_greenhouse__job_department_tmp", "model.greenhouse_source.stg_greenhouse__job_department_tmp"], "model.greenhouse_source.stg_greenhouse__application_history": ["model.greenhouse_source.stg_greenhouse__application_history_tmp", "model.greenhouse_source.stg_greenhouse__application_history_tmp"], "model.greenhouse_source.stg_greenhouse__interview": ["model.greenhouse_source.stg_greenhouse__interview_tmp", "model.greenhouse_source.stg_greenhouse__interview_tmp"], "model.greenhouse_source.stg_greenhouse__scheduled_interviewer": ["model.greenhouse_source.stg_greenhouse__scheduled_interviewer_tmp", "model.greenhouse_source.stg_greenhouse__scheduled_interviewer_tmp"], "model.greenhouse_source.stg_greenhouse__department": ["model.greenhouse_source.stg_greenhouse__department_tmp", "model.greenhouse_source.stg_greenhouse__department_tmp"], "model.greenhouse_source.stg_greenhouse__source": ["model.greenhouse_source.stg_greenhouse__source_tmp", "model.greenhouse_source.stg_greenhouse__source_tmp"], "model.greenhouse_source.stg_greenhouse__eeoc": ["model.greenhouse_source.stg_greenhouse__eeoc_tmp", "model.greenhouse_source.stg_greenhouse__eeoc_tmp"], "model.greenhouse_source.stg_greenhouse__user_email": ["model.greenhouse_source.stg_greenhouse__user_email_tmp", "model.greenhouse_source.stg_greenhouse__user_email_tmp"], "model.greenhouse_source.stg_greenhouse__prospect_pool": ["model.greenhouse_source.stg_greenhouse__prospect_pool_tmp", "model.greenhouse_source.stg_greenhouse__prospect_pool_tmp"], "model.greenhouse_source.stg_greenhouse__job": ["model.greenhouse_source.stg_greenhouse__job_tmp", "model.greenhouse_source.stg_greenhouse__job_tmp"], "model.greenhouse_source.stg_greenhouse__attachment": ["model.greenhouse_source.stg_greenhouse__attachment_tmp", "model.greenhouse_source.stg_greenhouse__attachment_tmp"], "model.greenhouse_source.stg_greenhouse__email_address": ["model.greenhouse_source.stg_greenhouse__email_address_tmp", "model.greenhouse_source.stg_greenhouse__email_address_tmp"], "model.greenhouse_source.stg_greenhouse__hiring_team": ["model.greenhouse_source.stg_greenhouse__hiring_team_tmp", "model.greenhouse_source.stg_greenhouse__hiring_team_tmp"], "model.greenhouse_source.stg_greenhouse__candidate_tag": ["model.greenhouse_source.stg_greenhouse__candidate_tag_tmp", "model.greenhouse_source.stg_greenhouse__candidate_tag_tmp"], "model.greenhouse_source.stg_greenhouse__office": ["model.greenhouse_source.stg_greenhouse__office_tmp", "model.greenhouse_source.stg_greenhouse__office_tmp"], "model.greenhouse_source.stg_greenhouse__interview_tmp": ["source.greenhouse_source.greenhouse.interview"], "model.greenhouse_source.stg_greenhouse__department_tmp": ["source.greenhouse_source.greenhouse.department"], "model.greenhouse_source.stg_greenhouse__scheduled_interview_tmp": ["seed.greenhouse_source_integration_tests.scheduled_interview"], "model.greenhouse_source.stg_greenhouse__scheduled_interviewer_tmp": ["source.greenhouse_source.greenhouse.scheduled_interviewer"], "model.greenhouse_source.stg_greenhouse__scorecard_tmp": ["source.greenhouse_source.greenhouse.scorecard"], "model.greenhouse_source.stg_greenhouse__hiring_team_tmp": ["source.greenhouse_source.greenhouse.hiring_team"], "model.greenhouse_source.stg_greenhouse__eeoc_tmp": ["source.greenhouse_source.greenhouse.eeoc"], "model.greenhouse_source.stg_greenhouse__job_opening_tmp": ["source.greenhouse_source.greenhouse.job_opening"], "model.greenhouse_source.stg_greenhouse__job_tmp": ["source.greenhouse_source.greenhouse.job"], "model.greenhouse_source.stg_greenhouse__source_tmp": ["source.greenhouse_source.greenhouse.source"], "model.greenhouse_source.stg_greenhouse__tag_tmp": ["source.greenhouse_source.greenhouse.tag"], "model.greenhouse_source.stg_greenhouse__office_tmp": ["source.greenhouse_source.greenhouse.office"], "model.greenhouse_source.stg_greenhouse__activity_tmp": ["source.greenhouse_source.greenhouse.activity"], "model.greenhouse_source.stg_greenhouse__candidate_tag_tmp": ["source.greenhouse_source.greenhouse.candidate_tag"], "model.greenhouse_source.stg_greenhouse__attachment_tmp": ["source.greenhouse_source.greenhouse.attachment"], "model.greenhouse_source.stg_greenhouse__job_office_tmp": ["source.greenhouse_source.greenhouse.job_office"], "model.greenhouse_source.stg_greenhouse__email_address_tmp": ["source.greenhouse_source.greenhouse.email_address"], "model.greenhouse_source.stg_greenhouse__phone_number_tmp": ["source.greenhouse_source.greenhouse.phone_number"], "model.greenhouse_source.stg_greenhouse__prospect_pool_tmp": ["source.greenhouse_source.greenhouse.prospect_pool"], "model.greenhouse_source.stg_greenhouse__social_media_address_tmp": ["source.greenhouse_source.greenhouse.social_media_address"], "model.greenhouse_source.stg_greenhouse__prospect_stage_tmp": ["source.greenhouse_source.greenhouse.prospect_stage"], "model.greenhouse_source.stg_greenhouse__job_application_tmp": ["source.greenhouse_source.greenhouse.job_application"], "model.greenhouse_source.stg_greenhouse__job_stage_tmp": ["source.greenhouse_source.greenhouse.job_stage"], "model.greenhouse_source.stg_greenhouse__user_tmp": ["source.greenhouse_source.greenhouse.user"], "model.greenhouse_source.stg_greenhouse__job_post_tmp": ["source.greenhouse_source.greenhouse.job_post"], "model.greenhouse_source.stg_greenhouse__job_department_tmp": ["source.greenhouse_source.greenhouse.job_department"], "model.greenhouse_source.stg_greenhouse__scorecard_attribute_tmp": ["source.greenhouse_source.greenhouse.scorecard_attribute"], "model.greenhouse_source.stg_greenhouse__application_tmp": ["source.greenhouse_source.greenhouse.application"], "model.greenhouse_source.stg_greenhouse__user_email_tmp": ["source.greenhouse_source.greenhouse.user_email"], "model.greenhouse_source.stg_greenhouse__candidate_tmp": ["source.greenhouse_source.greenhouse.candidate"], "model.greenhouse_source.stg_greenhouse__application_history_tmp": ["source.greenhouse_source.greenhouse.application_history"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__activity_activity_id__candidate_id.079b550f76": ["model.greenhouse_source.stg_greenhouse__activity"], "test.greenhouse_source.unique_stg_greenhouse__application_application_id.4b79b229f7": ["model.greenhouse_source.stg_greenhouse__application"], "test.greenhouse_source.not_null_stg_greenhouse__application_application_id.b3e0f342cb": ["model.greenhouse_source.stg_greenhouse__application"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__application_history_application_id__updated_at.163299738f": ["model.greenhouse_source.stg_greenhouse__application_history"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__attachment_candidate_id__index.15bb9a87dc": ["model.greenhouse_source.stg_greenhouse__attachment"], "test.greenhouse_source.unique_stg_greenhouse__candidate_candidate_id.506731b04d": ["model.greenhouse_source.stg_greenhouse__candidate"], "test.greenhouse_source.not_null_stg_greenhouse__candidate_candidate_id.11734ea8f8": ["model.greenhouse_source.stg_greenhouse__candidate"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__candidate_tag_candidate_id__tag_id.6579700f5f": ["model.greenhouse_source.stg_greenhouse__candidate_tag"], "test.greenhouse_source.unique_stg_greenhouse__department_department_id.45ce77a4ba": ["model.greenhouse_source.stg_greenhouse__department"], "test.greenhouse_source.not_null_stg_greenhouse__department_department_id.a66163e3c8": ["model.greenhouse_source.stg_greenhouse__department"], "test.greenhouse_source.unique_stg_greenhouse__eeoc_application_id.ce57333d9e": ["model.greenhouse_source.stg_greenhouse__eeoc"], "test.greenhouse_source.not_null_stg_greenhouse__eeoc_application_id.e480771a64": ["model.greenhouse_source.stg_greenhouse__eeoc"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__email_address_candidate_id__index.d7b76f0532": ["model.greenhouse_source.stg_greenhouse__email_address"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__hiring_team_job_id__role__user_id.090b0cec6e": ["model.greenhouse_source.stg_greenhouse__hiring_team"], "test.greenhouse_source.unique_stg_greenhouse__interview_interview_id.bc31a3a9c8": ["model.greenhouse_source.stg_greenhouse__interview"], "test.greenhouse_source.not_null_stg_greenhouse__interview_interview_id.9982dfcc43": ["model.greenhouse_source.stg_greenhouse__interview"], "test.greenhouse_source.unique_stg_greenhouse__job_job_id.a5e80b818d": ["model.greenhouse_source.stg_greenhouse__job"], "test.greenhouse_source.not_null_stg_greenhouse__job_job_id.fbeab127ff": ["model.greenhouse_source.stg_greenhouse__job"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_application_application_id__job_id.604a067fbe": ["model.greenhouse_source.stg_greenhouse__job_application"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_department_department_id__job_id.c7e6f4ae13": ["model.greenhouse_source.stg_greenhouse__job_department"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_office_office_id__job_id.b93625d1da": ["model.greenhouse_source.stg_greenhouse__job_office"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_opening_job_openining_id__job_id.6bc56bb4af": ["model.greenhouse_source.stg_greenhouse__job_opening"], "test.greenhouse_source.unique_stg_greenhouse__job_post_job_post_id.7b0cddbb02": ["model.greenhouse_source.stg_greenhouse__job_post"], "test.greenhouse_source.not_null_stg_greenhouse__job_post_job_post_id.fefcc39e72": ["model.greenhouse_source.stg_greenhouse__job_post"], "test.greenhouse_source.unique_stg_greenhouse__job_stage_job_stage_id.960a4cbb30": ["model.greenhouse_source.stg_greenhouse__job_stage"], "test.greenhouse_source.not_null_stg_greenhouse__job_stage_job_stage_id.f662323acb": ["model.greenhouse_source.stg_greenhouse__job_stage"], "test.greenhouse_source.unique_stg_greenhouse__office_office_id.0ab9fd9683": ["model.greenhouse_source.stg_greenhouse__office"], "test.greenhouse_source.not_null_stg_greenhouse__office_office_id.fc83d3c38a": ["model.greenhouse_source.stg_greenhouse__office"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__phone_number_candidate_id__index.2f9b07d2c4": ["model.greenhouse_source.stg_greenhouse__phone_number"], "test.greenhouse_source.unique_stg_greenhouse__scheduled_interview_scheduled_interview_id.3fb531b522": ["model.greenhouse_source.stg_greenhouse__scheduled_interview"], "test.greenhouse_source.not_null_stg_greenhouse__scheduled_interview_scheduled_interview_id.295891e7f5": ["model.greenhouse_source.stg_greenhouse__scheduled_interview"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__scheduled_interviewer_interviewer_user_id__scheduled_interview_id.d2eba190d2": ["model.greenhouse_source.stg_greenhouse__scheduled_interviewer"], "test.greenhouse_source.unique_stg_greenhouse__scorecard_scorecard_id.08770cba63": ["model.greenhouse_source.stg_greenhouse__scorecard"], "test.greenhouse_source.not_null_stg_greenhouse__scorecard_scorecard_id.d8b028c712": ["model.greenhouse_source.stg_greenhouse__scorecard"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__scorecard_attribute_scorecard_id__index.5f650990bb": ["model.greenhouse_source.stg_greenhouse__scorecard_attribute"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__social_media_address_candidate_id__index.07ae86df8f": ["model.greenhouse_source.stg_greenhouse__social_media_address"], "test.greenhouse_source.unique_stg_greenhouse__source_source_id.1e9ea7d264": ["model.greenhouse_source.stg_greenhouse__source"], "test.greenhouse_source.not_null_stg_greenhouse__source_source_id.3a35179705": ["model.greenhouse_source.stg_greenhouse__source"], "test.greenhouse_source.unique_stg_greenhouse__tag_tag_id.786c77d151": ["model.greenhouse_source.stg_greenhouse__tag"], "test.greenhouse_source.not_null_stg_greenhouse__tag_tag_id.c64705ac22": ["model.greenhouse_source.stg_greenhouse__tag"], "test.greenhouse_source.unique_stg_greenhouse__user_user_id.e1e33a654c": ["model.greenhouse_source.stg_greenhouse__user"], "test.greenhouse_source.not_null_stg_greenhouse__user_user_id.de3470de6a": ["model.greenhouse_source.stg_greenhouse__user"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__user_email_email__user_id.5807b23dc7": ["model.greenhouse_source.stg_greenhouse__user_email"], "test.greenhouse_source.unique_stg_greenhouse__prospect_pool_prospect_pool_id.fa31f2af50": ["model.greenhouse_source.stg_greenhouse__prospect_pool"], "test.greenhouse_source.not_null_stg_greenhouse__prospect_pool_prospect_pool_id.293ef56820": ["model.greenhouse_source.stg_greenhouse__prospect_pool"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__prospect_stage_prospect_pool_id__prospect_stage_id.20ef21c4bb": ["model.greenhouse_source.stg_greenhouse__prospect_stage"], "source.greenhouse_source.greenhouse.activity": [], "source.greenhouse_source.greenhouse.application": [], "source.greenhouse_source.greenhouse.application_history": [], "source.greenhouse_source.greenhouse.attachment": [], "source.greenhouse_source.greenhouse.candidate": [], "source.greenhouse_source.greenhouse.candidate_tag": [], "source.greenhouse_source.greenhouse.department": [], "source.greenhouse_source.greenhouse.eeoc": [], "source.greenhouse_source.greenhouse.email_address": [], "source.greenhouse_source.greenhouse.hiring_team": [], "source.greenhouse_source.greenhouse.interview": [], "source.greenhouse_source.greenhouse.job": [], "source.greenhouse_source.greenhouse.job_application": [], "source.greenhouse_source.greenhouse.job_department": [], "source.greenhouse_source.greenhouse.job_office": [], "source.greenhouse_source.greenhouse.job_opening": [], "source.greenhouse_source.greenhouse.job_post": [], "source.greenhouse_source.greenhouse.job_stage": [], "source.greenhouse_source.greenhouse.office": [], "source.greenhouse_source.greenhouse.phone_number": [], "source.greenhouse_source.greenhouse.scheduled_interview": [], "source.greenhouse_source.greenhouse.scheduled_interviewer": [], "source.greenhouse_source.greenhouse.scorecard": [], "source.greenhouse_source.greenhouse.scorecard_attribute": [], "source.greenhouse_source.greenhouse.social_media_address": [], "source.greenhouse_source.greenhouse.source": [], "source.greenhouse_source.greenhouse.tag": [], "source.greenhouse_source.greenhouse.user": [], "source.greenhouse_source.greenhouse.user_email": [], "source.greenhouse_source.greenhouse.prospect_pool": [], "source.greenhouse_source.greenhouse.prospect_stage": []}, "child_map": {"seed.greenhouse_source_integration_tests.attachment": [], "seed.greenhouse_source_integration_tests.job": [], "seed.greenhouse_source_integration_tests.source": [], "seed.greenhouse_source_integration_tests.eeoc": [], "seed.greenhouse_source_integration_tests.application_history": [], "seed.greenhouse_source_integration_tests.job_post": [], "seed.greenhouse_source_integration_tests.prospect_stage": [], "seed.greenhouse_source_integration_tests.office": [], "seed.greenhouse_source_integration_tests.interview": [], "seed.greenhouse_source_integration_tests.candidate": [], "seed.greenhouse_source_integration_tests.hiring_team": [], "seed.greenhouse_source_integration_tests.job_application": [], "seed.greenhouse_source_integration_tests.social_media_address": [], "seed.greenhouse_source_integration_tests.scheduled_interviewer": [], "seed.greenhouse_source_integration_tests.user_email": [], "seed.greenhouse_source_integration_tests.activity": [], "seed.greenhouse_source_integration_tests.department": [], "seed.greenhouse_source_integration_tests.job_department": [], "seed.greenhouse_source_integration_tests.tag": [], "seed.greenhouse_source_integration_tests.scorecard_attribute": [], "seed.greenhouse_source_integration_tests.phone_number": [], "seed.greenhouse_source_integration_tests.scheduled_interview": ["model.greenhouse_source.stg_greenhouse__scheduled_interview_tmp"], "seed.greenhouse_source_integration_tests.user": [], "seed.greenhouse_source_integration_tests.prospect_pool": [], "seed.greenhouse_source_integration_tests.job_stage": [], "seed.greenhouse_source_integration_tests.application": [], "seed.greenhouse_source_integration_tests.job_office": [], "seed.greenhouse_source_integration_tests.email_address": [], "seed.greenhouse_source_integration_tests.scorecard": [], "seed.greenhouse_source_integration_tests.candidate_tag": [], "seed.greenhouse_source_integration_tests.job_opening": [], "model.greenhouse_source.stg_greenhouse__user": ["test.greenhouse_source.not_null_stg_greenhouse__user_user_id.de3470de6a", "test.greenhouse_source.unique_stg_greenhouse__user_user_id.e1e33a654c"], "model.greenhouse_source.stg_greenhouse__job_office": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_office_office_id__job_id.b93625d1da"], "model.greenhouse_source.stg_greenhouse__scorecard_attribute": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__scorecard_attribute_scorecard_id__index.5f650990bb"], "model.greenhouse_source.stg_greenhouse__scheduled_interview": ["test.greenhouse_source.not_null_stg_greenhouse__scheduled_interview_scheduled_interview_id.295891e7f5", "test.greenhouse_source.unique_stg_greenhouse__scheduled_interview_scheduled_interview_id.3fb531b522"], "model.greenhouse_source.stg_greenhouse__job_post": ["test.greenhouse_source.not_null_stg_greenhouse__job_post_job_post_id.fefcc39e72", "test.greenhouse_source.unique_stg_greenhouse__job_post_job_post_id.7b0cddbb02"], "model.greenhouse_source.stg_greenhouse__job_stage": ["test.greenhouse_source.not_null_stg_greenhouse__job_stage_job_stage_id.f662323acb", "test.greenhouse_source.unique_stg_greenhouse__job_stage_job_stage_id.960a4cbb30"], "model.greenhouse_source.stg_greenhouse__social_media_address": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__social_media_address_candidate_id__index.07ae86df8f"], "model.greenhouse_source.stg_greenhouse__prospect_stage": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__prospect_stage_prospect_pool_id__prospect_stage_id.20ef21c4bb"], "model.greenhouse_source.stg_greenhouse__scorecard": ["test.greenhouse_source.not_null_stg_greenhouse__scorecard_scorecard_id.d8b028c712", "test.greenhouse_source.unique_stg_greenhouse__scorecard_scorecard_id.08770cba63"], "model.greenhouse_source.stg_greenhouse__tag": ["test.greenhouse_source.not_null_stg_greenhouse__tag_tag_id.c64705ac22", "test.greenhouse_source.unique_stg_greenhouse__tag_tag_id.786c77d151"], "model.greenhouse_source.stg_greenhouse__job_application": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_application_application_id__job_id.604a067fbe"], "model.greenhouse_source.stg_greenhouse__phone_number": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__phone_number_candidate_id__index.2f9b07d2c4"], "model.greenhouse_source.stg_greenhouse__activity": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__activity_activity_id__candidate_id.079b550f76"], "model.greenhouse_source.stg_greenhouse__job_opening": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_opening_job_openining_id__job_id.6bc56bb4af"], "model.greenhouse_source.stg_greenhouse__application": ["test.greenhouse_source.not_null_stg_greenhouse__application_application_id.b3e0f342cb", "test.greenhouse_source.unique_stg_greenhouse__application_application_id.4b79b229f7"], "model.greenhouse_source.stg_greenhouse__candidate": ["test.greenhouse_source.not_null_stg_greenhouse__candidate_candidate_id.11734ea8f8", "test.greenhouse_source.unique_stg_greenhouse__candidate_candidate_id.506731b04d"], "model.greenhouse_source.stg_greenhouse__job_department": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_department_department_id__job_id.c7e6f4ae13"], "model.greenhouse_source.stg_greenhouse__application_history": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__application_history_application_id__updated_at.163299738f"], "model.greenhouse_source.stg_greenhouse__interview": ["test.greenhouse_source.not_null_stg_greenhouse__interview_interview_id.9982dfcc43", "test.greenhouse_source.unique_stg_greenhouse__interview_interview_id.bc31a3a9c8"], "model.greenhouse_source.stg_greenhouse__scheduled_interviewer": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__scheduled_interviewer_interviewer_user_id__scheduled_interview_id.d2eba190d2"], "model.greenhouse_source.stg_greenhouse__department": ["test.greenhouse_source.not_null_stg_greenhouse__department_department_id.a66163e3c8", "test.greenhouse_source.unique_stg_greenhouse__department_department_id.45ce77a4ba"], "model.greenhouse_source.stg_greenhouse__source": ["test.greenhouse_source.not_null_stg_greenhouse__source_source_id.3a35179705", "test.greenhouse_source.unique_stg_greenhouse__source_source_id.1e9ea7d264"], "model.greenhouse_source.stg_greenhouse__eeoc": ["test.greenhouse_source.not_null_stg_greenhouse__eeoc_application_id.e480771a64", "test.greenhouse_source.unique_stg_greenhouse__eeoc_application_id.ce57333d9e"], "model.greenhouse_source.stg_greenhouse__user_email": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__user_email_email__user_id.5807b23dc7"], "model.greenhouse_source.stg_greenhouse__prospect_pool": ["test.greenhouse_source.not_null_stg_greenhouse__prospect_pool_prospect_pool_id.293ef56820", "test.greenhouse_source.unique_stg_greenhouse__prospect_pool_prospect_pool_id.fa31f2af50"], "model.greenhouse_source.stg_greenhouse__job": ["test.greenhouse_source.not_null_stg_greenhouse__job_job_id.fbeab127ff", "test.greenhouse_source.unique_stg_greenhouse__job_job_id.a5e80b818d"], "model.greenhouse_source.stg_greenhouse__attachment": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__attachment_candidate_id__index.15bb9a87dc"], "model.greenhouse_source.stg_greenhouse__email_address": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__email_address_candidate_id__index.d7b76f0532"], "model.greenhouse_source.stg_greenhouse__hiring_team": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__hiring_team_job_id__role__user_id.090b0cec6e"], "model.greenhouse_source.stg_greenhouse__candidate_tag": ["test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__candidate_tag_candidate_id__tag_id.6579700f5f"], "model.greenhouse_source.stg_greenhouse__office": ["test.greenhouse_source.not_null_stg_greenhouse__office_office_id.fc83d3c38a", "test.greenhouse_source.unique_stg_greenhouse__office_office_id.0ab9fd9683"], "model.greenhouse_source.stg_greenhouse__interview_tmp": ["model.greenhouse_source.stg_greenhouse__interview", "model.greenhouse_source.stg_greenhouse__interview"], "model.greenhouse_source.stg_greenhouse__department_tmp": ["model.greenhouse_source.stg_greenhouse__department", "model.greenhouse_source.stg_greenhouse__department"], "model.greenhouse_source.stg_greenhouse__scheduled_interview_tmp": ["model.greenhouse_source.stg_greenhouse__scheduled_interview", "model.greenhouse_source.stg_greenhouse__scheduled_interview"], "model.greenhouse_source.stg_greenhouse__scheduled_interviewer_tmp": ["model.greenhouse_source.stg_greenhouse__scheduled_interviewer", "model.greenhouse_source.stg_greenhouse__scheduled_interviewer"], "model.greenhouse_source.stg_greenhouse__scorecard_tmp": ["model.greenhouse_source.stg_greenhouse__scorecard", "model.greenhouse_source.stg_greenhouse__scorecard"], "model.greenhouse_source.stg_greenhouse__hiring_team_tmp": ["model.greenhouse_source.stg_greenhouse__hiring_team", "model.greenhouse_source.stg_greenhouse__hiring_team"], "model.greenhouse_source.stg_greenhouse__eeoc_tmp": ["model.greenhouse_source.stg_greenhouse__eeoc", "model.greenhouse_source.stg_greenhouse__eeoc"], "model.greenhouse_source.stg_greenhouse__job_opening_tmp": ["model.greenhouse_source.stg_greenhouse__job_opening", "model.greenhouse_source.stg_greenhouse__job_opening"], "model.greenhouse_source.stg_greenhouse__job_tmp": ["model.greenhouse_source.stg_greenhouse__job", "model.greenhouse_source.stg_greenhouse__job"], "model.greenhouse_source.stg_greenhouse__source_tmp": ["model.greenhouse_source.stg_greenhouse__source", "model.greenhouse_source.stg_greenhouse__source"], "model.greenhouse_source.stg_greenhouse__tag_tmp": ["model.greenhouse_source.stg_greenhouse__tag", "model.greenhouse_source.stg_greenhouse__tag"], "model.greenhouse_source.stg_greenhouse__office_tmp": ["model.greenhouse_source.stg_greenhouse__office", "model.greenhouse_source.stg_greenhouse__office"], "model.greenhouse_source.stg_greenhouse__activity_tmp": ["model.greenhouse_source.stg_greenhouse__activity", "model.greenhouse_source.stg_greenhouse__activity"], "model.greenhouse_source.stg_greenhouse__candidate_tag_tmp": ["model.greenhouse_source.stg_greenhouse__candidate_tag", "model.greenhouse_source.stg_greenhouse__candidate_tag"], "model.greenhouse_source.stg_greenhouse__attachment_tmp": ["model.greenhouse_source.stg_greenhouse__attachment", "model.greenhouse_source.stg_greenhouse__attachment"], "model.greenhouse_source.stg_greenhouse__job_office_tmp": ["model.greenhouse_source.stg_greenhouse__job_office", "model.greenhouse_source.stg_greenhouse__job_office"], "model.greenhouse_source.stg_greenhouse__email_address_tmp": ["model.greenhouse_source.stg_greenhouse__email_address", "model.greenhouse_source.stg_greenhouse__email_address"], "model.greenhouse_source.stg_greenhouse__phone_number_tmp": ["model.greenhouse_source.stg_greenhouse__phone_number", "model.greenhouse_source.stg_greenhouse__phone_number"], "model.greenhouse_source.stg_greenhouse__prospect_pool_tmp": ["model.greenhouse_source.stg_greenhouse__prospect_pool", "model.greenhouse_source.stg_greenhouse__prospect_pool"], "model.greenhouse_source.stg_greenhouse__social_media_address_tmp": ["model.greenhouse_source.stg_greenhouse__social_media_address", "model.greenhouse_source.stg_greenhouse__social_media_address"], "model.greenhouse_source.stg_greenhouse__prospect_stage_tmp": ["model.greenhouse_source.stg_greenhouse__prospect_stage", "model.greenhouse_source.stg_greenhouse__prospect_stage"], "model.greenhouse_source.stg_greenhouse__job_application_tmp": ["model.greenhouse_source.stg_greenhouse__job_application", "model.greenhouse_source.stg_greenhouse__job_application"], "model.greenhouse_source.stg_greenhouse__job_stage_tmp": ["model.greenhouse_source.stg_greenhouse__job_stage", "model.greenhouse_source.stg_greenhouse__job_stage"], "model.greenhouse_source.stg_greenhouse__user_tmp": ["model.greenhouse_source.stg_greenhouse__user", "model.greenhouse_source.stg_greenhouse__user"], "model.greenhouse_source.stg_greenhouse__job_post_tmp": ["model.greenhouse_source.stg_greenhouse__job_post", "model.greenhouse_source.stg_greenhouse__job_post"], "model.greenhouse_source.stg_greenhouse__job_department_tmp": ["model.greenhouse_source.stg_greenhouse__job_department", "model.greenhouse_source.stg_greenhouse__job_department"], "model.greenhouse_source.stg_greenhouse__scorecard_attribute_tmp": ["model.greenhouse_source.stg_greenhouse__scorecard_attribute", "model.greenhouse_source.stg_greenhouse__scorecard_attribute"], "model.greenhouse_source.stg_greenhouse__application_tmp": ["model.greenhouse_source.stg_greenhouse__application", "model.greenhouse_source.stg_greenhouse__application"], "model.greenhouse_source.stg_greenhouse__user_email_tmp": ["model.greenhouse_source.stg_greenhouse__user_email", "model.greenhouse_source.stg_greenhouse__user_email"], "model.greenhouse_source.stg_greenhouse__candidate_tmp": ["model.greenhouse_source.stg_greenhouse__candidate", "model.greenhouse_source.stg_greenhouse__candidate"], "model.greenhouse_source.stg_greenhouse__application_history_tmp": ["model.greenhouse_source.stg_greenhouse__application_history", "model.greenhouse_source.stg_greenhouse__application_history"], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__activity_activity_id__candidate_id.079b550f76": [], "test.greenhouse_source.unique_stg_greenhouse__application_application_id.4b79b229f7": [], "test.greenhouse_source.not_null_stg_greenhouse__application_application_id.b3e0f342cb": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__application_history_application_id__updated_at.163299738f": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__attachment_candidate_id__index.15bb9a87dc": [], "test.greenhouse_source.unique_stg_greenhouse__candidate_candidate_id.506731b04d": [], "test.greenhouse_source.not_null_stg_greenhouse__candidate_candidate_id.11734ea8f8": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__candidate_tag_candidate_id__tag_id.6579700f5f": [], "test.greenhouse_source.unique_stg_greenhouse__department_department_id.45ce77a4ba": [], "test.greenhouse_source.not_null_stg_greenhouse__department_department_id.a66163e3c8": [], "test.greenhouse_source.unique_stg_greenhouse__eeoc_application_id.ce57333d9e": [], "test.greenhouse_source.not_null_stg_greenhouse__eeoc_application_id.e480771a64": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__email_address_candidate_id__index.d7b76f0532": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__hiring_team_job_id__role__user_id.090b0cec6e": [], "test.greenhouse_source.unique_stg_greenhouse__interview_interview_id.bc31a3a9c8": [], "test.greenhouse_source.not_null_stg_greenhouse__interview_interview_id.9982dfcc43": [], "test.greenhouse_source.unique_stg_greenhouse__job_job_id.a5e80b818d": [], "test.greenhouse_source.not_null_stg_greenhouse__job_job_id.fbeab127ff": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_application_application_id__job_id.604a067fbe": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_department_department_id__job_id.c7e6f4ae13": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_office_office_id__job_id.b93625d1da": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__job_opening_job_openining_id__job_id.6bc56bb4af": [], "test.greenhouse_source.unique_stg_greenhouse__job_post_job_post_id.7b0cddbb02": [], "test.greenhouse_source.not_null_stg_greenhouse__job_post_job_post_id.fefcc39e72": [], "test.greenhouse_source.unique_stg_greenhouse__job_stage_job_stage_id.960a4cbb30": [], "test.greenhouse_source.not_null_stg_greenhouse__job_stage_job_stage_id.f662323acb": [], "test.greenhouse_source.unique_stg_greenhouse__office_office_id.0ab9fd9683": [], "test.greenhouse_source.not_null_stg_greenhouse__office_office_id.fc83d3c38a": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__phone_number_candidate_id__index.2f9b07d2c4": [], "test.greenhouse_source.unique_stg_greenhouse__scheduled_interview_scheduled_interview_id.3fb531b522": [], "test.greenhouse_source.not_null_stg_greenhouse__scheduled_interview_scheduled_interview_id.295891e7f5": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__scheduled_interviewer_interviewer_user_id__scheduled_interview_id.d2eba190d2": [], "test.greenhouse_source.unique_stg_greenhouse__scorecard_scorecard_id.08770cba63": [], "test.greenhouse_source.not_null_stg_greenhouse__scorecard_scorecard_id.d8b028c712": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__scorecard_attribute_scorecard_id__index.5f650990bb": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__social_media_address_candidate_id__index.07ae86df8f": [], "test.greenhouse_source.unique_stg_greenhouse__source_source_id.1e9ea7d264": [], "test.greenhouse_source.not_null_stg_greenhouse__source_source_id.3a35179705": [], "test.greenhouse_source.unique_stg_greenhouse__tag_tag_id.786c77d151": [], "test.greenhouse_source.not_null_stg_greenhouse__tag_tag_id.c64705ac22": [], "test.greenhouse_source.unique_stg_greenhouse__user_user_id.e1e33a654c": [], "test.greenhouse_source.not_null_stg_greenhouse__user_user_id.de3470de6a": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__user_email_email__user_id.5807b23dc7": [], "test.greenhouse_source.unique_stg_greenhouse__prospect_pool_prospect_pool_id.fa31f2af50": [], "test.greenhouse_source.not_null_stg_greenhouse__prospect_pool_prospect_pool_id.293ef56820": [], "test.greenhouse_source.dbt_utils_unique_combination_of_columns_stg_greenhouse__prospect_stage_prospect_pool_id__prospect_stage_id.20ef21c4bb": [], "source.greenhouse_source.greenhouse.activity": ["model.greenhouse_source.stg_greenhouse__activity_tmp"], "source.greenhouse_source.greenhouse.application": ["model.greenhouse_source.stg_greenhouse__application_tmp"], "source.greenhouse_source.greenhouse.application_history": ["model.greenhouse_source.stg_greenhouse__application_history_tmp"], "source.greenhouse_source.greenhouse.attachment": ["model.greenhouse_source.stg_greenhouse__attachment_tmp"], "source.greenhouse_source.greenhouse.candidate": ["model.greenhouse_source.stg_greenhouse__candidate_tmp"], "source.greenhouse_source.greenhouse.candidate_tag": ["model.greenhouse_source.stg_greenhouse__candidate_tag_tmp"], "source.greenhouse_source.greenhouse.department": ["model.greenhouse_source.stg_greenhouse__department_tmp"], "source.greenhouse_source.greenhouse.eeoc": ["model.greenhouse_source.stg_greenhouse__eeoc_tmp"], "source.greenhouse_source.greenhouse.email_address": ["model.greenhouse_source.stg_greenhouse__email_address_tmp"], "source.greenhouse_source.greenhouse.hiring_team": ["model.greenhouse_source.stg_greenhouse__hiring_team_tmp"], "source.greenhouse_source.greenhouse.interview": ["model.greenhouse_source.stg_greenhouse__interview_tmp"], "source.greenhouse_source.greenhouse.job": ["model.greenhouse_source.stg_greenhouse__job_tmp"], "source.greenhouse_source.greenhouse.job_application": ["model.greenhouse_source.stg_greenhouse__job_application_tmp"], "source.greenhouse_source.greenhouse.job_department": ["model.greenhouse_source.stg_greenhouse__job_department_tmp"], "source.greenhouse_source.greenhouse.job_office": ["model.greenhouse_source.stg_greenhouse__job_office_tmp"], "source.greenhouse_source.greenhouse.job_opening": ["model.greenhouse_source.stg_greenhouse__job_opening_tmp"], "source.greenhouse_source.greenhouse.job_post": ["model.greenhouse_source.stg_greenhouse__job_post_tmp"], "source.greenhouse_source.greenhouse.job_stage": ["model.greenhouse_source.stg_greenhouse__job_stage_tmp"], "source.greenhouse_source.greenhouse.office": ["model.greenhouse_source.stg_greenhouse__office_tmp"], "source.greenhouse_source.greenhouse.phone_number": ["model.greenhouse_source.stg_greenhouse__phone_number_tmp"], "source.greenhouse_source.greenhouse.scheduled_interview": [], "source.greenhouse_source.greenhouse.scheduled_interviewer": ["model.greenhouse_source.stg_greenhouse__scheduled_interviewer_tmp"], "source.greenhouse_source.greenhouse.scorecard": ["model.greenhouse_source.stg_greenhouse__scorecard_tmp"], "source.greenhouse_source.greenhouse.scorecard_attribute": ["model.greenhouse_source.stg_greenhouse__scorecard_attribute_tmp"], "source.greenhouse_source.greenhouse.social_media_address": ["model.greenhouse_source.stg_greenhouse__social_media_address_tmp"], "source.greenhouse_source.greenhouse.source": ["model.greenhouse_source.stg_greenhouse__source_tmp"], "source.greenhouse_source.greenhouse.tag": ["model.greenhouse_source.stg_greenhouse__tag_tmp"], "source.greenhouse_source.greenhouse.user": ["model.greenhouse_source.stg_greenhouse__user_tmp"], "source.greenhouse_source.greenhouse.user_email": ["model.greenhouse_source.stg_greenhouse__user_email_tmp"], "source.greenhouse_source.greenhouse.prospect_pool": ["model.greenhouse_source.stg_greenhouse__prospect_pool_tmp"], "source.greenhouse_source.greenhouse.prospect_stage": ["model.greenhouse_source.stg_greenhouse__prospect_stage_tmp"]}}